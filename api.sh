#!/bin/bash
generate_random_string() {
    local length=$1
    local chars=${2:-"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-="}
    local random_string=""

    if [ -z "$length" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏."
        return 1
    fi

    for ((i = 0; i < length; i++)); do
        random_string+="${chars:RANDOM%${#chars}:1}"
    done
    echo "$random_string"
}
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
_make_registration_request() {
    local domain="$1"
    local username="$2"
    local password="$3"

    local api_url="https://$domain/api/auth/register"
    local json_data="{\"username\": \"$username\", \"password\": \"$password\"}"

    local response=$(curl -s -X POST "$api_url" \
                     -H "Content-Type: application/json" \
                     -d "$json_data")
    
    echo "$response"
}

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
register_panel_user_interactive() {
    echo "================================================="
    echo " üîë –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê"
    echo "================================================="
    
    # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –ø–∞–Ω–µ–ª–∏
    read -p "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, panel.example.com): " domain
    if [ -z "$domain" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        sleep 3
        return 1
    fi

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    local username=$(generate_random_string 12)
    local password=$(generate_random_string 24)
    
    echo "üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ..."
    sleep 2
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    local api_url="https://$domain/api/auth/register"
    local json_data="{\"username\": \"$username\", \"password\": \"$password\"}"
    
    local response=$(curl -s -X POST "$api_url" \
                     -H "Content-Type: application/json" \
                     -d "$json_data")

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    local token=$(echo "$response" | jq -r '.response.token' 2>/dev/null)
    
    if [ -n "$token" ]; then
        echo "üéâ –£–°–ü–ï–•: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        local SCRIPT_DIR="/opt/Remnawave-autoinstall-script"
        local ENV_FILE="$SCRIPT_DIR/.env"
        
        echo -e "\n# Generated by script on $(date)" >> "$ENV_FILE"
        echo "ADMIN_USERNAME=$username" >> "$ENV_FILE"
        echo "ADMIN_PASSWORD=$password" >> "$ENV_FILE"
        echo "JWT_API_TOKENS_SECRET=$token" >> "$ENV_FILE"
        
        echo "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $ENV_FILE"
        
        # 6. –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        echo "‚ùó‚ùó –í–ù–ò–ú–ê–ù–ò–ï: –°–û–•–†–ê–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï. –û–ù–ò –ù–ï –ë–£–î–£–¢ –ü–û–ö–ê–ó–ê–ù–´ –°–ù–û–í–ê."
        echo "üîë –õ–æ–≥–∏–Ω: $username"
        echo "üîë –ü–∞—Ä–æ–ª—å: $password"
        
        sleep 10
        return 0
    else
        echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        echo "‚ùó –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response"
        sleep 5
        return 1
    fi
}
get_config_profiles() {
    local domain_url="$1"
    local token="$2"

    local config_response=$(make_api_request "GET" "http://$domain_url/api/config-profiles" "$token")
    if [ -z "$config_response" ] || ! echo "$config_response" | jq -e '.response.configProfiles' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND): ${config_response}${NC}"
        return 1
    fi

    local profile_uuid=$(echo "$config_response" | jq -r '.response.configProfiles[] | select(.name == "Default-Profile") | .uuid' 2>/dev/null)
    if [ -z "$profile_uuid" ]; then
        echo -e "${YELLOW}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND)${NC}"
        return 1
    fi

    echo "$profile_uuid"
    return 0
}

get_inbound_from_panel() {
    local domain_url=$1
    local token=$2

    local inbounds_response=$(make_api_request "GET" "http://$domain_url/api/inbounds" "$token")
    if [ -z "$inbounds_response" ] || ! echo "$inbounds_response" | jq -e '.response.inbounds' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_GET_INBOUNDS): $inbounds_response${NC}"
        return 1
    fi

    local inbounds=$(echo "$inbounds_response" | jq -r '.response.inbounds[] | "\(.uuid) \(.name)"')
    if [ -z "$inbounds" ]; then
        echo -e "${RED}‚ùå $(get_text NO_INBOUNDS_FOUND)${NC}"
        return 1
    fi

    local i=1
    declare -A inbound_map
    echo "$(get_text SELECT_INBOUND)"
    while IFS= read -r line; do
        local uuid=$(echo "$line" | awk '{print $1}')
        local name=$(echo "$line" | cut -d' ' -f2-)
        inbound_map["$i"]="$uuid"
        echo -e "${ORANGE}$i) ${WHITE}$name${NC}"
        ((i++))
    done <<< "$inbounds"

    echo ""
    read -p "$(get_text ENTER_YOUR_CHOICE): " choice
    local selected_uuid="${inbound_map[$choice]}"
    
    if [ -z "$selected_uuid" ]; then
        return 1
    fi

    echo "$selected_uuid"
}

create_node() {
    local domain_url=$1
    local token=$2
    local config_profile_uuid=$3
    local inbound_uuid=$4
    local node_address="${5:-$(curl -s -4 ifconfig.me || curl -s -4 api.ipify.org || curl -s -4 ipinfo.io/ip)}"
    local node_name="${6:-Node-$(date +%s)}"

    local node_data=$(cat <<EOF
{
    "name": "$node_name",
    "address": "$node_address",
    "port": 2222,
    "configProfile": {
        "activeConfigProfileUuid": "$config_profile_uuid",
        "activeInbounds": ["$inbound_uuid"]
    },
    "isTrafficTrackingActive": false,
    "trafficLimitBytes": 0,
    "notifyPercent": 0,
    "trafficResetDay": 31,
    "excludedInbounds": [],
    "countryCode": "XX",
    "consumptionMultiplier": 1.0
}
EOF
)

    local node_response=$(make_api_request "POST" "http://$domain_url/api/nodes" "$token" "$node_data")

    if [ -z "$node_response" ] || ! echo "$node_response" | jq -e '.response.uuid' > /dev/null 2>&1; then
        echo -e "${RED}$(get_text ERROR_CREATE_NODE): ${node_response}${NC}"
        return 1
    fi

    echo -e "${GREEN}$(get_text NODE_CREATED)${NC}\n"
    return 0
}
