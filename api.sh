#!/bin/bash
generate_random_string() {
    local length=$1
    local chars=${2:-"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-="}
    local random_string=""

    if [ -z "$length" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏."
        return 1
    fi

    for ((i = 0; i < length; i++)); do
        random_string+="${chars:RANDOM%${#chars}:1}"
    done
    echo "$random_string"
}
make_api_request() {
    local method=$1
    local url=$2
    local data=$3
    local response

    response=$(curl -s -X "$method" "$url" \
               -H "Content-Type: application/json" \
               -d "$data")

    echo "$response"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ .env
get_panel_token() {
    local ENV_FILE="/opt/remnawave/.env"
    local TOKEN_VAR="JWT_API_TOKENS_SECRET"

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª .env
    if [ ! -f "$ENV_FILE" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ $ENV_FILE."
        return 1
    fi

    # 2. –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º –≤ —Ñ–∞–π–ª–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    local token=$(grep "^$TOKEN_VAR=" "$ENV_FILE" | cut -d'=' -f2-)
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    if [ -z "$token" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JWT_API_TOKENS_SECRET –≤ —Ñ–∞–π–ª–µ .env."
        return 1
    fi

    echo "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ .env."
    echo "$token"
}
register_panel_user() {
    clear
    
    # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –ø–∞–Ω–µ–ª–∏
    read -p "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, panel.example.com): " domain
    if [ -z "$domain" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        return 1
    fi

    # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
    read -p "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " username
    echo "‚ö†Ô∏è –ü–ê–†–û–õ–¨ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ/—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."
    read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " password
    echo

    if [ -z "$username" ] || [ -z "$password" ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏."
        return 1
    fi

    # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
    if [ ${#password} -lt 24 ]; then
        echo "‚ùå –û–®–ò–ë–ö–ê: –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤."
        return 1
    fi

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º JSON-—Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    local json_data="{\"username\": \"$username\", \"password\": \"$password\"}"
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º API-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    local api_url="http://$domain/api/auth/register"
    local response=$(make_api_request "POST" "$api_url" "$json_data")

    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if echo "$response" | grep -q '"success":true'; then
        echo "üéâ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
        echo "‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response"
    else
        echo "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        echo "‚ùó –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $response"
        return 1
    fi

    return 0
}
get_config_profiles() {
    local domain_url="$1"
    local token="$2"

    local config_response=$(make_api_request "GET" "http://$domain_url/api/config-profiles" "$token")
    if [ -z "$config_response" ] || ! echo "$config_response" | jq -e '.response.configProfiles' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND): ${config_response}${NC}"
        return 1
    fi

    local profile_uuid=$(echo "$config_response" | jq -r '.response.configProfiles[] | select(.name == "Default-Profile") | .uuid' 2>/dev/null)
    if [ -z "$profile_uuid" ]; then
        echo -e "${YELLOW}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND)${NC}"
        return 1
    fi

    echo "$profile_uuid"
    return 0
}

get_inbound_from_panel() {
    local domain_url=$1
    local token=$2

    local inbounds_response=$(make_api_request "GET" "http://$domain_url/api/inbounds" "$token")
    if [ -z "$inbounds_response" ] || ! echo "$inbounds_response" | jq -e '.response.inbounds' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_GET_INBOUNDS): $inbounds_response${NC}"
        return 1
    fi

    local inbounds=$(echo "$inbounds_response" | jq -r '.response.inbounds[] | "\(.uuid) \(.name)"')
    if [ -z "$inbounds" ]; then
        echo -e "${RED}‚ùå $(get_text NO_INBOUNDS_FOUND)${NC}"
        return 1
    fi

    local i=1
    declare -A inbound_map
    echo "$(get_text SELECT_INBOUND)"
    while IFS= read -r line; do
        local uuid=$(echo "$line" | awk '{print $1}')
        local name=$(echo "$line" | cut -d' ' -f2-)
        inbound_map["$i"]="$uuid"
        echo -e "${ORANGE}$i) ${WHITE}$name${NC}"
        ((i++))
    done <<< "$inbounds"

    echo ""
    read -p "$(get_text ENTER_YOUR_CHOICE): " choice
    local selected_uuid="${inbound_map[$choice]}"
    
    if [ -z "$selected_uuid" ]; then
        return 1
    fi

    echo "$selected_uuid"
}

create_node() {
    local domain_url=$1
    local token=$2
    local config_profile_uuid=$3
    local inbound_uuid=$4
    local node_address="${5:-$(curl -s -4 ifconfig.me || curl -s -4 api.ipify.org || curl -s -4 ipinfo.io/ip)}"
    local node_name="${6:-Node-$(date +%s)}"

    local node_data=$(cat <<EOF
{
    "name": "$node_name",
    "address": "$node_address",
    "port": 2222,
    "configProfile": {
        "activeConfigProfileUuid": "$config_profile_uuid",
        "activeInbounds": ["$inbound_uuid"]
    },
    "isTrafficTrackingActive": false,
    "trafficLimitBytes": 0,
    "notifyPercent": 0,
    "trafficResetDay": 31,
    "excludedInbounds": [],
    "countryCode": "XX",
    "consumptionMultiplier": 1.0
}
EOF
)

    local node_response=$(make_api_request "POST" "http://$domain_url/api/nodes" "$token" "$node_data")

    if [ -z "$node_response" ] || ! echo "$node_response" | jq -e '.response.uuid' > /dev/null 2>&1; then
        echo -e "${RED}$(get_text ERROR_CREATE_NODE): ${node_response}${NC}"
        return 1
    fi

    echo -e "${GREEN}$(get_text NODE_CREATED)${NC}\n"
    return 0
}
