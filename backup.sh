#!/bin/bash
disable_telegram_backup() {
    local BACKUP_SCRIPT_PATH="/usr/local/bin/remnawave_backup.sh"
    
    clear
    echo "$(get_text "DISABLE_BACKUP_HEADER")"
    echo "---"

    if yn_prompt "$(get_text "CONFIRM_DISABLE_BACKUP")"; then
        # Проверяем, существует ли задача в crontab
        if sudo crontab -l 2>/dev/null | grep -q "$BACKUP_SCRIPT_PATH"; then
            # Удаляем задачу, оставляя все остальные
            (sudo crontab -l 2>/dev/null | grep -v "$BACKUP_SCRIPT_PATH") | sudo crontab -
            echo -e "\n${GREEN}$(get_text "CRON_JOB_REMOVED")${NC}"
        else
            echo -e "\n${YELLOW}$(get_text "CRON_JOB_NOT_FOUND")${NC}"
        fi
    else
        echo -e "\n${YELLOW}$(get_text "OPERATION_CANCELLED")${NC}"
    fi

    echo ""
    read -p "$(get_text "PRESS_ENTER_TO_RETURN")"
    start
}
run_backup_logic() {
    local backup_type="$1"
    local TELEGRAM_TOKEN=""
    local CHAT_ID=""
    local setup_cron="false"

    local SCRIPT_DIR="/opt/Remnawave-autoinstall-script" # Указываем абсолютный путь
    local TELEGRAM_ENV_FILE="$SCRIPT_DIR/.env"
    local DB_ENV_FILE="/opt/remnawave/.env"

    if [ -f "$TELEGRAM_ENV_FILE" ]; then
        TELEGRAM_TOKEN=$(grep -E '^TELEGRAM_TOKEN=' "$TELEGRAM_ENV_FILE" | cut -d'=' -f2- | tr -d '"')
        CHAT_ID=$(grep -E '^CHAT_ID=' "$TELEGRAM_ENV_FILE" | cut -d'=' -f2- | tr -d '"')
    fi

    if yn_prompt "$(get_text "PROMPT_SCHEDULE_BACKUP")"; then
        setup_cron="true"
        echo ""

        if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$CHAT_ID" ]; then
            if yn_prompt "$(get_text "PROMPT_FOUND_CONFIG")"; then
                echo "$(get_text "PROMPT_USING_SAVED_CONFIG")"
            else
                TELEGRAM_TOKEN=""
                CHAT_ID=""
            fi
        fi

        if [ -z "$TELEGRAM_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            if yn_prompt "$(get_text "PROMPT_SETUP_TELEGRAM")"; then
                echo "$(get_text "TELEGRAM_INFO_1")"
                echo "$(get_text "TELEGRAM_INFO_2")"
                echo "$(get_text "TELEGRAM_INFO_3")"
                echo ""
                read -p "$(get_text "PROMPT_TELEGRAM_TOKEN")" TELEGRAM_TOKEN
                read -p "$(get_text "PROMPT_CHAT_ID")" CHAT_ID

                if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$CHAT_ID" ]; then
                    echo "$(get_text "SAVING_NEW_SETTINGS")"
                    # Перезаписываем или добавляем переменные
                    grep -v -E '^TELEGRAM_TOKEN=|^CHAT_ID=' "$TELEGRAM_ENV_FILE" > "${TELEGRAM_ENV_FILE}.tmp" 2>/dev/null
                    mv "${TELEGRAM_ENV_FILE}.tmp" "$TELEGRAM_ENV_FILE"
                    echo "TELEGRAM_TOKEN=\"$TELEGRAM_TOKEN\"" >> "$TELEGRAM_ENV_FILE"
                    echo "CHAT_ID=\"$CHAT_ID\"" >> "$TELEGRAM_ENV_FILE"
                    echo "$(get_text "CONFIG_SAVED_SUCCESS")$TELEGRAM_ENV_FILE."
                fi
            fi
        fi
    fi

    echo "$(get_text "SEARCHING_DB_CONFIG")"
    local DB_USER="remnawave"
    local DB_PASS=""
    local DB_HOST="remnawave-db"
    local DB_NAME="remnawave"

    if [ -f "$DB_ENV_FILE" ]; then
        echo "$(get_text "DB_CONFIG_FOUND")"
        local DB_URL=$(grep 'DATABASE_URL' "$DB_ENV_FILE" | cut -d'=' -f2- | tr -d '"')
        if [[ -n "$DB_URL" ]]; then
            DB_USER=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/([^:]+):.*@.*/\1/')
            DB_PASS=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/[^:]+:([^@]+)@.*/\1/')
            DB_HOST=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/[^@]+@([^:]+):.*/\1/')
            DB_NAME=$(echo "$DB_URL" | sed -E 's/.*\/([^?]+).*/\1/')
            echo "$(get_text "DB_INFO_EXTRACTED")"
        else
            echo "$(get_text "DB_URL_NOT_FOUND")"
        fi
    else
        echo "$(get_text "DB_ENV_NOT_FOUND")"
    fi

    if ! command -v docker &> /dev/null; then
        echo "$(get_text "DOCKER_NOT_RUNNING")"
        echo "$(get_text "DOCKER_INSTALL_PROMPT")"
        exit 1
    fi

    local BACKUP_SCRIPT_PATH="/usr/local/bin/remnawave_backup.sh"

    # --- УЛУЧШЕННАЯ ГЕНЕРАЦИЯ СКРИПТА С ПОМОЩЬЮ HERE DOCUMENT ---
    echo "$(get_text "GENERATING_BACKUP_SCRIPT")"

    # Предварительно получаем все строки из словаря
    local text_telegram_caption="$(get_text "TELEGRAM_CAPTION")"
    local text_sending_to_telegram="$(get_text "SENDING_TO_TELEGRAM")"
    local text_db_dump_error="$(get_text "DB_DUMP_ERROR")"
    
    # Создаем скрипт с помощью here-document. Это гораздо чище и надежнее.
    sudo tee "$BACKUP_SCRIPT_PATH" > /dev/null <<EOF
#!/bin/bash
# Auto-generated by Remnawave-autoinstall-script

# --- CONFIGURATION ---
BACKUP_DIR="/opt/backups"
MAX_BACKUPS=50
TELEGRAM_TOKEN="$TELEGRAM_TOKEN"
CHAT_ID="$CHAT_ID"
DB_USER="$DB_USER"
DB_PASS="$DB_PASS"
DB_HOST="$DB_HOST"
DB_NAME="$DB_NAME"
BACKUP_TYPE="$backup_type"

# --- FUNCTIONS ---
send_telegram_file() {
    local file_path="\$1"
    local caption_text="$text_telegram_caption"
    local caption="\${caption_text}\$(basename "\$file_path")"
    if [ -n "\$TELEGRAM_TOKEN" ] && [ -n "\$CHAT_ID" ]; then
        echo "$text_sending_to_telegram"
        curl -s -X POST "https://api.telegram.org/bot\${TELEGRAM_TOKEN}/sendDocument" \\
            -F document=@"\$file_path" \\
            -F chat_id="\$CHAT_ID" \\
            -F caption="\$caption" > /dev/null
    fi
}

clean_old_backups() {
    mkdir -p "\$BACKUP_DIR"
    while [ \$(ls -1 "\$BACKUP_DIR" | wc -l) -gt \$MAX_BACKUPS ]; do
        oldest_backup=\$(ls -1t "\$BACKUP_DIR" | tail -n 1)
        rm -- "\$BACKUP_DIR/\$oldest_backup"
    done
}

# --- MAIN LOGIC ---
echo "Backup started: \$(date)"
mkdir -p "\$BACKUP_DIR"
TIMESTAMP=\$(date +"%Y-%m-%d_%H-%M-%S")
TEMP_DIR="/tmp/remnawave_backup_\$TIMESTAMP"
mkdir -p "\$TEMP_DIR"

# 1. Create database dump
DB_BACKUP_FILE="\$TEMP_DIR/remnawave_db.sql"
if ! PGPASSWORD="\$DB_PASS" docker exec "\$DB_HOST" pg_dump -U "\$DB_USER" -d "\$DB_NAME" > "\$DB_BACKUP_FILE"; then
    echo "$text_db_dump_error"
    rm -rf "\$TEMP_DIR"
    exit 1
fi

# 2. Copy files based on backup type
case "\$BACKUP_TYPE" in
    "db_and_remnawave")
        cp -a /opt/remnawave "\$TEMP_DIR/remnawave"
        ;;
    "all_opt")
        mkdir "\$TEMP_DIR/opt"
        for dir in /opt/*; do
            if [ "\$dir" != "\$BACKUP_DIR" ]; then
                cp -a "\$dir" "\$TEMP_DIR/opt/"
            fi
        done
        ;;
esac

# 3. Archive everything from the temporary directory
FINAL_ARCHIVE_FILE="\$BACKUP_DIR/Remnawave-backup-\$TIMESTAMP.tar.gz"
tar -czf "\$FINAL_ARCHIVE_FILE" -C "\$TEMP_DIR" .

# 4. Send to Telegram and clean up
send_telegram_file "\$FINAL_ARCHIVE_FILE"
rm -rf "\$TEMP_DIR"
clean_old_backups

echo "Backup finished successfully: \$FINAL_ARCHIVE_FILE"
EOF
    
    sudo chmod +x "$BACKUP_SCRIPT_PATH"
    echo "$(get_text "BACKUP_SCRIPT_CREATED") $BACKUP_SCRIPT_PATH"
    sleep 2

    echo "$(get_text "RUNNING_ONE_TIME_BACKUP")"
    sudo bash "$BACKUP_SCRIPT_PATH"

    if [ "$setup_cron" == "true" ]; then
        echo ""
        local choice_index
        declare -a cron_options=(
            "$(get_text "CRON_DAILY")"
            "$(get_text "CRON_TWICE_DAILY")"
            "$(get_text "CRON_WEEKLY")"
            "$(get_text "CRON_CUSTOM")"
        )
        
        select_menu \
            cron_options \
            "" \
            choice_index \
            "$(get_text "CRON_SETUP_HEADER")" \
            "$(get_text "CRON_SCHEDULE_PROMPT")"

        local CRON_SCHEDULE=""
        case "$choice_index" in
            0) CRON_SCHEDULE="0 3 * * *" ;;
            1) CRON_SCHEDULE="0 3,15 * * *" ;;
            2) CRON_SCHEDULE="0 3 * * 0" ;;
            3) 
               echo ""
               echo "$(get_text "CRON_CUSTOM_HINT")"
               read -p "$(get_text "ENTER_CUSTOM_CRON")" CRON_SCHEDULE 
               ;;
            *) 
               echo "$(get_text "CRON_INVALID_CHOICE")"; CRON_SCHEDULE="0 3 * * *" 
               ;;
        esac

        # Удаляем старую задачу (если есть) и добавляем новую
        (sudo crontab -l 2>/dev/null | grep -v "$BACKUP_SCRIPT_PATH"; echo "$CRON_SCHEDULE $BACKUP_SCRIPT_PATH > /dev/null 2>&1") | sudo crontab -
        echo "$(get_text "CRON_SCHEDULE_SAVED") '$CRON_SCHEDULE'."
    else
        echo "$(get_text "BACKUP_DONE_NO_CRON")"
    fi

    echo ""
    read -p "$(get_text "PRESS_ENTER_TO_RETURN")"
    start
}