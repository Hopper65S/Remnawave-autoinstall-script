#!/bin/bash

# === –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò (REMNAWAVE) ===

change_panel_domain() {
    clear
    echo "$(get_text CHANGE_DOMAIN_HEADER)"
    echo "--------------------------------------------------"

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    read -p "$(get_text CONFIRM_CHANGE_DOMAIN)" -n 1 -r CONFIRMATION
    echo ""
    if [[ ! $CONFIRMATION =~ ^[Yy]$ ]]; then
        echo -e "\n${YELLOW}‚ùå $(get_text OPERATION_CANCELLED)${NC}"
        return 0
    fi
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
    read -p "$(get_text ENTER_NEW_DOMAIN)" NEW_DOMAIN
    if [ -z "$NEW_DOMAIN" ]; then
        echo -e "\n${RED}‚ùå $(get_text INPUT_REQUIRED)${NC}"
        return 1
    fi
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    local caddyfile_path="/opt/remnawave/caddy/Caddyfile"
    local env_path="/opt/remnawave/.env"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Caddyfile –∏ .env
    if [ ! -f "$caddyfile_path" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_CADDYFILE_NOT_FOUND)${NC}"
        return 1
    fi
    if [ ! -f "$env_path" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_ENV_NOT_FOUND)${NC}"
        return 1
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ Caddyfile
    echo -e "\n‚öôÔ∏è $(get_text UPDATING_CADDYFILE)"
    sudo sed -i "1s/.*/$NEW_DOMAIN/" "$caddyfile_path"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_UPDATE_CADDYFILE)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_UPDATE_CADDYFILE)"

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ .env
    echo -e "\n‚öôÔ∏è $(get_text UPDATING_ENV)"
    sudo sed -i "s|^FRONT_END_DOMAIN=.*|FRONT_END_DOMAIN=$NEW_DOMAIN|" "$env_path"
    sudo sed -i "s|^SUB_PUBLIC_DOMAIN=.*|SUB_PUBLIC_DOMAIN=$NEW_DOMAIN/api/sub|" "$env_path"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_UPDATE_ENV)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_UPDATE_ENV)"

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy
    echo -e "\nüîÑ $(get_text RESTARTING_CADDY)"
    sudo docker compose -f /opt/remnawave/docker-compose.yml restart caddy
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_RESTART_CADDY)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_RESTART_CADDY)"

    echo -e "\nüéâ $(get_text CHANGE_DOMAIN_COMPLETE)"
    sleep 3
}
check_logs_and_suggest_fix() {
    echo "$(get_text CHECK_PANEL_LOGS_START)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä remnawave, –ø—Ä–µ–∂–¥–µ —á–µ–º —á–∏—Ç–∞—Ç—å –ª–æ–≥–∏
    if ! sudo docker ps -a --format '{{.Names}}' | grep -q 'remnawave'; then
        echo "$(get_text CONTAINER_NOT_FOUND_LOGS)"
        return 1
    fi

    # –ò—â–µ–º –≤ –ª–æ–≥–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `grep` –∏ —Ñ–ª–∞–≥ `-q` –¥–ª—è —Ç–∏—Ö–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
    if sudo docker logs remnawave 2>&1 | grep -q "Error: P1000"; then
        echo "--------------------------------------------------------------------------------"
        echo "$(get_text LOG_ERROR_FOUND)"
        echo "$(get_text LOG_ERROR_DB_CONNECT)"
        echo "$(get_text LOG_ERROR_REASON)"
        echo "$(get_text LOG_ERROR_RECOMMENDATION)"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        read -p "$(get_text LOG_ERROR_PROMPT)" choice
        if [[ "$choice" =~ ^[yY]$ ]]; then
            cd /opt/remnawave
            echo "$(get_text CLEANING_VOLUMES)"
            sudo docker compose down --volumes
            sudo docker compose up -d --force-recreate
            echo "$(get_text VOLUMES_CLEANED_RESTART)"
        else
            echo "$(get_text CLEANUP_CANCELED)"
        fi
        
        echo "--------------------------------------------------------------------------------"
        return 1
    else
        echo "$(get_text NO_DB_AUTH_ERROR)"
        return 0
    fi
}
setup_remnawave() {
    echo "$(get_text PANEL_INSTALL_START)"
    sleep 2
    echo -e "${WHITE}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    install_docker
    if [ $? -ne 0 ]; then
        echo "$(get_text DOCKER_INSTALL_ERROR)"
        return 1
    fi
    sleep 2

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ iptables
    sudo systemctl restart docker
    if [ $? -ne 0 ]; then
        echo "$(get_text DOCKER_RESTART_ERROR)"
        return 1
    fi
    echo "$(get_text DOCKER_RESTART_SUCCESS)"
    sleep 2

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
    echo "$(get_text CREATE_DIR_PANEL)"
    sudo mkdir -p /opt/remnawave
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_DIR_PANEL)"
        return 1
    fi
    cd /opt/remnawave
    echo "$(get_text SUCCESS_DIR_CREATED_PANEL)"
    sleep 0.5

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã docker-compose.yml –∏ .env
    echo "$(get_text DOWNLOAD_FILES_PANEL)"
    sudo curl -o docker-compose.yml https://raw.githubusercontent.com/remnawave/backend/main/docker-compose-prod.yml
    sudo curl -o .env https://raw.githubusercontent.com/remnawave/backend/main/.env.sample
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_DOWNLOAD_FILES_PANEL)"
        return 1
    fi
    echo "$(get_text SUCCESS_DOWNLOAD_FILES_PANEL)"
    sleep 0.5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
    if [ -f .env ]; then
        echo "$(get_text ENV_EXISTS_PANEL)"
        sleep 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º JWT_AUTH_SECRET, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "JWT_AUTH_SECRET=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^JWT_AUTH_SECRET=.*/JWT_AUTH_SECRET=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º JWT_API_TOKENS_SECRET, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "JWT_API_TOKENS_SECRET=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^JWT_API_TOKENS_SECRET=.*/JWT_API_TOKENS_SECRET=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º METRICS_PASS, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "METRICS_PASS=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^METRICS_PASS=.*/METRICS_PASS=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º WEBHOOK_SECRET_HEADER, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "WEBHOOK_SECRET_HEADER=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^WEBHOOK_SECRET_HEADER=.*/WEBHOOK_SECRET_HEADER=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º POSTGRES_PASSWORD, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "POSTGRES_PASSWORD=change_me" .env; then
            echo "$(get_text GENERATE_DB_PASSWORD_PANEL)"
            pw=$(openssl rand -hex 24)
            sudo sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$pw/" .env
            sudo sed -i "s|^\(DATABASE_URL=\"postgresql://postgres:\)[^\@]*\(@.*\)|\1$pw\2|" .env
            echo "$(get_text SUCCESS_DB_PASSWORD_PANEL)"
        fi
    else
        # –ï—Å–ª–∏ .env —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ –ø–∞—Ä–æ–ª–∏
        echo "$(get_text GENERATE_KEYS_PANEL)"
        sudo sed -i "s/^JWT_AUTH_SECRET=.*/JWT_AUTH_SECRET=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^JWT_API_TOKENS_SECRET=.*/JWT_API_TOKENS_SECRET=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^METRICS_PASS=.*/METRICS_PASS=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^WEBHOOK_SECRET_HEADER=.*/WEBHOOK_SECRET_HEADER=$(openssl rand -hex 64)/" .env
        echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        sleep 0.5
        
        echo "$(get_text GENERATE_DB_PASSWORD_PANEL)"
        pw=$(openssl rand -hex 24)
        sudo sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$pw/" .env
        sudo sed -i "s|^\(DATABASE_URL=\"postgresql://postgres:\)[^\@]*\(@.*\)|\1$pw\2|" .env
        echo "$(get_text SUCCESS_DB_PASSWORD_PANEL)"
        sleep 0.5
    fi

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ .env Remnawave
    echo "$(get_text SET_DOMAIN_PANEL)"
    sudo sed -i "s/^FRONT_END_DOMAIN=.*/FRONT_END_DOMAIN=$DOMAIN/" .env
    sudo sed -i "s|^SUB_PUBLIC_DOMAIN=.*|SUB_PUBLIC_DOMAIN=$DOMAIN/api/sub|" .env
    echo "$(get_text SUCCESS_DOMAIN_SET_PANEL)"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnawave
    echo "$(get_text RUN_CONTAINERS_PANEL)"
    sudo docker compose up -d
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_RUN_CONTAINERS_PANEL)"
        check_logs_and_suggest_fix
        return 1
    fi
    echo "$(get_text SUCCESS_CONTAINERS_RUN_PANEL)"
    sleep 5

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy
    install_caddy_docker
    if [ $? -ne 0 ]; then
        echo "$(get_text CADDY_INSTALL_ERROR_PANEL)"
        return 1
    fi
    sleep 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
    check_panel_status
    if [ $? -ne 0 ]; then
        echo "$(get_text PANEL_UNREACHABLE_DNS_FW)"
        return 1
    fi

    echo "$(get_text PANEL_INSTALL_COMPLETE)"
    sleep 7
}

install_caddy_docker() {
    echo "$(get_text CADDY_INSTALL_START)"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Caddy
    echo "$(get_text CREATE_CADDY_DIRS)"
    sudo mkdir -p /opt/remnawave/caddy
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDY_DIR)"
        return 1
    fi

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Caddy
    cd /opt/remnawave/caddy
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CADDY_CD)"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Caddyfile, –µ—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if [ -d Caddyfile ]; then
        echo "$(get_text CADDYFILE_IS_DIR)"
        sudo rm -rf Caddyfile
    fi

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Caddyfile
    echo "$(get_text CREATE_CADDYFILE)"
    sleep 1
    sudo cat > Caddyfile <<EOF
https://$DOMAIN {
    reverse_proxy * http://remnawave:3000
}
:443 {
    tls internal
    respond 204
}
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDYFILE)"
        return 1
    fi

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª docker-compose.yml –¥–ª—è Caddy
    echo "$(get_text CREATE_CADDY_COMPOSE)"
    sleep 1
    sudo cat > docker-compose.yml <<EOF
services:
    caddy:
        image: caddy:2.9
        container_name: 'caddy'
        hostname: caddy
        restart: always
        ports:
            - '0.0.0.0:443:443'
            - '0.0.0.0:80:80'
        networks:
            - remnawave-network
        volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy-ssl-data:/data

networks:
    remnawave-network:
        name: remnawave-network
        driver: bridge
        external: true

volumes:
    caddy-ssl-data:
        driver: local
        external: false
        name: caddy-ssl-data
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDY_COMPOSE)"
        sleep 1
        return 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy
    echo "$(get_text START_CADDY_CONTAINER)"
    sudo docker compose up -d

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_START_CADDY)"
        echo "$(get_text CADDY_AUTOFIX_START)"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ç–æ–º–æ–≤
        sudo docker compose down --volumes
        sleep 2
        echo "$(get_text CADDY_AUTOFIX_SUCCESS)"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ Caddy –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        sudo docker compose up -d
        if [ $? -eq 0 ]; then
            echo "$(get_text CADDY_ALREADY_RUNNING)"
        else
            echo "$(get_text CADDY_AUTOFIX_FAILED)"
            return 1
        fi
    fi

    echo "$(get_text CADDY_INSTALL_COMPLETE)"
    # === –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê ===
    start_time=$(date +%s)
    found_log=false
    # –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
    echo -e "\033[?25l"
    # –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    spinner_chars=("." ".." "..." "")
    spinner_index=0
    
    while [ $(( $(date +%s) - start_time )) -lt 30 ]; do
        if sudo docker logs remnawave 2>&1 | grep -q "Remnawave Backend"; then
            echo -e "\r${GREEN}$(get_text CONTAINER_START_SUCCESS)      "
            found_log=true
            break
        fi
        
        # –í—ã–≤–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏
        echo -ne "\r$(get_text WAITING_FOR_CONTAINER_START)${spinner_chars[spinner_index]}   "
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        spinner_index=$(( (spinner_index + 1) % 4 ))
        
        sleep 1
    done

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
    echo -ne "\r${NC}"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
    echo -e "\033[?25h"

    if [ "$found_log" = false ]; then
        echo "$(get_text CONTAINER_START_TIMEOUT)"
    fi
    # === –ö–û–ù–ï–¶ –û–ñ–ò–î–ê–ù–ò–Ø ===
    sleep 3
}

check_panel_status() {
    clear
    local url="https://$DOMAIN"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ jq, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if ! command -v jq &> /dev/null; then
        echo "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        sudo apt-get update && sudo apt-get install jq -y
    fi

    clear
    echo "=================================================="
    echo -e " ¬† ¬† ¬† ¬† ${CYAN}$(get_text PANEL_STATUS_HEADER)${NC}"
    echo "=================================================="
    sleep 1

    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
    local ip_address=$(dig +short "$DOMAIN" | head -n 1)
    if [ -z "$ip_address" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_DOMAIN_RESOLVE_FAILED)${NC}"
        return 1
    fi

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
    local geo_info=$(curl -s "https://ipinfo.io/$ip_address/json" 2>/dev/null)
    local country_name=$(echo "$geo_info" | jq -r '.country' 2>/dev/null)
    local city_name=$(echo "$geo_info" | jq -r '.city' 2>/dev/null)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP-—Å—Ç–∞—Ç—É—Å–∞
    local http_code=$(curl -sS -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 15 --retry 3 --retry-delay 5 "$url")

    echo -e "\n${CYAN}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–ê–¢–£–°–ï –ü–ê–ù–ï–õ–ò:${NC}"
    echo "--------------------------------------------------"
    echo -e "${GREEN}‚Ä¢ –î–æ–º–µ–Ω: ${WHITE}$DOMAIN${NC}"
    echo -e "${GREEN}‚Ä¢ IP-–∞–¥—Ä–µ—Å: ${WHITE}$ip_address${NC}"
    [[ "$country_name" != "null" ]] && echo -e "${GREEN}‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${WHITE}$country_name${NC}"
    [[ "$city_name" != "null" ]] && echo -e "${GREEN}‚Ä¢ –ì–æ—Ä–æ–¥: ${WHITE}$city_name${NC}"
    echo -e "${GREEN}‚Ä¢ HTTP-–∫–æ–¥: ${WHITE}$http_code${NC}"

    echo -e "${GREEN}‚Ä¢ URL: ${CYAN}\e]8;;${url}\a${url}\e]8;;\a${NC}"

    if [[ "$http_code" == "200" || "$http_code" == "301" || "$http_code" == "302" ]]; then
        echo -e "\n${GREEN}$(get_text PANEL_SUCCESS_STATUS)${NC}"
    elif [[ "$http_code" == "000" ]]; then
        echo -e "\n${RED}$(get_text PANEL_UNREACHABLE_DNS_FW)${NC}"
    else
        echo -e "\n${RED}$(get_text PANEL_UNREACHABLE_CADDY)${NC}"
    fi

    echo "--------------------------------------------------"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...${NC}"
    read -r
}