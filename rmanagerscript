#!/bin/bash
# REMNAWAVE MANAGER SCRIPT by Hopper
# Global variables
VERSION="v 0.5.6"
CONFIG_FILE=".env"
export DUMMY_IP="1.1.1.1"
#==========================================================================
clear
apt install sudo &>/dev/null
sudo apt-get update &>/dev/null
sudo apt-get install fonts-noto-color-emoji &>/dev/null
sudo fc-cache -f -v &>/dev/null

# =========================================================================
# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Ctrl+C ===
# =========================================================================
ORANGE='\033[93m'
GREEN='\033[32m'
RED='\033[0;31m'
NC='\033[0m' # No Color
WHITE='\033[1;37m'
CYAN='\033[0;36m'

function cleanup {
    echo -e "\033[?25h"  # Show cursor
    exit 1
}
trap cleanup SIGINT

# =========================================================================
# === –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
# =========================================================================
declare -A lang_ru
declare -A lang_en

# –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
lang_ru=(
    # === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ===
    ["MENU_NODE"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥—ã Remnanode"
    ["MENU_PANEL"]="üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["MENU_BACKUP"]="üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    ["MENU_OTHER"]="‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    ["MENU_WARP"]="üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WARP Proxy"
    ["ABOUT_HEADER"]="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ"
    ["ABOUT_INFO"]="–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–¥–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN-—Å–µ—Ä–≤–µ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º,\n–æ—Å–≤–æ–±–æ–¥–∏–≤ –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\nüßë‚Äçüíª –ó–∞–±—É–¥—å—Ç–µ –æ —á–∞—Å–∞—Ö, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ Docker –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π\n–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Remnawave –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN-–Ω–æ–¥—ã. –û–Ω\n–±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º\n—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n\n‚ú® –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\nüöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π VPN-—Å–µ—Ä–≤–µ—Ä.\nüõ°Ô∏è –ü–æ–≤—ã—Å–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, —Å–æ–∑–¥–∞–≤\n–æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏–≤ SSH-–∫–ª—é—á–∏.\nüî• –ù–∞—Å—Ç—Ä–æ–∏—Ç—å firewall, –æ—Ç–∫—Ä—ã–≤ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã,\n—á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º.\n‚ö°Ô∏è –¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å WARP –æ—Ç Cloudflare."
    ["MENU_CLEANUP"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–∞–ø–æ–∫ Remnawave/Remnanode"
    ["MENU_EDIT_CONFIG"]="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env"
    ["MENU_VIEW_CONFIG"]="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ .env"
    ["MENU_DELETE"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ"
    ["MENU_EXIT"]="üö™ –í—ã—Ö–æ–¥"
    ["GO_BACK"]="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    ["MENU_PROMPT"]="üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
    ["ENTER_YOUR_CHOICE"]="‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: "
    ["INVALID_INPUT"]="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    ["RETURNING"]="‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    ["OPERATION_CANCELLED"]="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    ["AUTHOR"]="By Hopper"
    ["MENU_PROMPT_SELECT"]="–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚Üë‚Üì, –í—ã–±–æ—Ä: Enter"
    ["MAIN_MENU_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ["GO_BACK"]="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    ["START_MENU_ABOUT"]="‚ÑπÔ∏è –û —Å–∫—Ä–∏–ø—Ç–µ"
    ["OPERATION_CANCELLED"]="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    ["PROCEED_WITHOUT_CONFIG"]="‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º."
    ["CONFIG_SETUP_PROMPT"]="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å?"
    ["CONFIG_REQUIRED_INFO"]="–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ –≤ –º–µ–Ω—é '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env'."
    # === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
    ["WELCOME_HEADER"]="üëã Remnawave Manager"
    ["WELCOME_TEXT1"]="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ"
    ["WELCOME_TEXT2"]="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
    ["WELCOME_TEXT3"]="–Ω–æ–¥—É, –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø."
    ["STARTUP_ANIMATION_TEXT"]="üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞..."
    ["STARTUP_ANIMATION_TEXT_2"]="‚è≥ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑"
    ["seconds_suffix"]="—Å–µ–∫—É–Ω–¥"
    ["STARTUP_ANIMATION_SUCCESS"]="‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    ["EXITING_SCRIPT"]="üö™ –í—ã—Ö–æ–¥..."
    ["FULL_INSTALL_COMPLETE"]="üéâ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave ===
    ["PANEL_MENU_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ Remnawave:"
    ["PANEL_MENU_HEADER"]="üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["PANEL_MENU_FULL_INSTALL"]="‚öôÔ∏è –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["PANEL_MENU_UPLOAD_DB"]="‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–Ω–µ–ª—å"
    ["PANEL_MENU_CHANGE_DOMAIN"]="üåê –°–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏"
    ["PANEL_MENU_CHECK_ERRORS"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞ –æ—à–∏–±–∫–∏"
    ["PANEL_MENU_STATUS"]="üìã –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏"
    ["PANEL_INSTALL_START"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave..."
    ["PANEL_INSTALL_COMPLETE"]="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["RUN_CONTAINERS_PANEL"]="üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Remnawave..."
    ["SUCCESS_CONTAINERS_RUN_PANEL"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã."
    ["CHECK_PANEL_STATUS_PANEL"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É: \$url"
    ["PANEL_SUCCESS_STATUS"]="‚úÖ –ü–∞–Ω–µ–ª—å Remnawave —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞"
    ["CREATE_DIR_PANEL"]="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/remnawave"
    ["SUCCESS_DIR_CREATED_PANEL"]="‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞. –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \$(pwd)"
    ["DOWNLOAD_FILES_PANEL"]="‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ docker-compose.yml –∏ .env"
    ["SUCCESS_DOWNLOAD_FILES_PANEL"]="‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    ["ENV_EXISTS_PANEL"]="‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª—è."
    ["GENERATE_KEYS_PANEL"]="üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π..."
    ["SUCCESS_KEYS_GENERATED_PANEL"]="‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã."
    ["GENERATE_DB_PASSWORD_PANEL"]="üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    ["SUCCESS_DB_PASSWORD_PANEL"]="‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è PostgreSQL —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."
    ["SET_DOMAIN_PANEL"]="üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–º–µ–Ω–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å"
    ["SUCCESS_DOMAIN_SET_PANEL"]="‚úÖ –î–æ–º–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    ["PANEL_STATUS_HEADER"]="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–Ω–µ–ª–∏"
    ["CHECK_PANEL_LOGS_START"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ remnawave –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    ["NO_DB_AUTH_ERROR"]="‚úÖ –í –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ë–î. –ò–∑—É—á–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
    ["CONFIRM_CHANGE_DOMAIN"]="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω? (y/n) "
    ["CHANGE_DOMAIN_HEADER"]="üåê –°–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏"
    ["ENTER_NEW_DOMAIN"]="‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): "
    ["UPDATING_CADDYFILE"]="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Caddyfile..."
    ["SUCCESS_UPDATE_CADDYFILE"]="‚úÖ Caddyfile —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω."
    ["UPDATING_ENV"]="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    ["SUCCESS_UPDATE_ENV"]="‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω."
    ["RESTARTING_CADDY"]="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Caddy..."
    ["SUCCESS_RESTART_CADDY"]="‚úÖ Caddy —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    ["CHANGE_DOMAIN_COMPLETE"]="üéâ –°–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥—ã Remnanode ===
    ["NODE_MENU_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã:"
    ["NODE_MENU_HEADER"]="üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥—ã Remnanode"
    ["NODE_MENU_FULL_INSTALL"]="‚öôÔ∏è –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (Docker, Remnanode, Caddy, Firewall)"
    ["NODE_MENU_NODE_ONLY"]="‚öôÔ∏è –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Remnanode"
    ["NODE_MENU_ADD_NODE_AUTO"]="‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    ["SETUP_REMNANODE"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Remnanode..."
    ["CREATE_REMNANODE_DIR"]="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ /opt/remnanode"
    ["CREATE_ENV_FILE"]="üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env —Å –∫–ª—é—á–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ["SUCCESS_ENV_FILE"]="‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —Å –∫–ª—é—á–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ["CHECK_DOCKER_COMPOSE"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml"
    ["CREATE_DOCKER_COMPOSE"]="üìù –°–æ–∑–¥–∞–Ω docker-compose.yml"
    ["DOCKER_COMPOSE_EXISTS"]="‚úÖ –§–∞–π–ª docker-compose.yml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    ["START_REMNANODE_CONTAINER"]="üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Remnanode"
    ["REMNANODE_SETUP_COMPLETE"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Remnanode –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["CHECK_REMNANODE_LOGS_HEADER"]="--- üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Remnanode ---"
    ["LOGS_CLEAN"]="‚úÖ –õ–æ–≥–∏ Remnanode —á–∏—Å—Ç—ã. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
    ["ADD_NODE_AUTO_HEADER"]="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã –≤ –ø–∞–Ω–µ–ª—å"
    ["GETTING_TOKEN"]="–ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞..."
    ["GETTING_CONFIG_PROFILE_UUID"]="–ü–æ–ª—É—á–∞—é UUID –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    ["SELECT_INBOUND"]="–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∏–Ω–±–∞—É–Ω–¥–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:"
    ["ENTER_NODE_DETAILS"]="–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–¥—ã:"
    ["ENTER_NODE_DOMAIN"]="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ IP-–∞–¥—Ä–µ—Å –Ω–æ–≤–æ–π –Ω–æ–¥—ã: "
    ["ENTER_NODE_NAME"]="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –Ω–æ–¥—ã: "
    ["ADDING_NODE_TO_PANEL"]="–î–æ–±–∞–≤–ª—è—é –Ω–æ–¥—É –≤ –ø–∞–Ω–µ–ª—å..."
    # === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ (Docker, SSH, Caddy, Firewall, WARP) ===
    ["NODE_MENU_DOCKER_ONLY"]="üê≥ –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    ["DOCKER_INSTALLING"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    ["CHECK_DOCKER"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    ["DOCKER_ALREADY_INSTALLED"]="‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ["DOCKER_INSTALL_COMPLETE"]="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["DOCKER_RESTART_SUCCESS"]="‚úÖ Docker —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    ["NODE_MENU_SSH_ONLY"]="üîí –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ["SSH_SETUP_START"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    ["ENTER_SSH_PORT"]="üîë –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç SSH: "
    ["ENTER_NEW_USER"]="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
    ["ENTER_PASSWORD"]="üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
    ["SSH_KEY_INFO"]="A public SSH key is required for authentication."
    ["ENTER_SSH_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á: "
    ["CHECK_SSH_PORT"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ—Ä—Ç–∞ \$SSH_PORT"
    ["SSH_PORT_CONFIGURING"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –Ω–∞ –ø–æ—Ä—Ç—É \$SSH_PORT"
    ["SSH_PORT_ALREADY_SET"]="‚úÖ SSH –ø–æ—Ä—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    ["CHECK_SSH_SECURITY"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SSH"
    ["SSH_SECURITY_CONFIGURING"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SSH"
    ["SSH_SECURITY_ALREADY_SET"]="‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SSH —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    ["CHECK_USER"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \$NEW_USER"
    ["USER_CREATING"]="‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \$NEW_USER"
    ["USER_ALREADY_EXISTS"]="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    ["CHECK_SSH_KEY"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH-–∫–ª—é—á–∞ –¥–ª—è \$NEW_USER"
    ["SSH_KEY_CONFIGURING"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–ª—é—á–∞ –¥–ª—è \$NEW_USER"
    ["SSH_KEY_ALREADY_SET"]="‚úÖ SSH-–∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    ["SSH_RESTART"]="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ SSH"
    ["SSH_SETUP_COMPLETE"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["PANEL_MENU_CADDY_ONLY"]="üåê –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–≤–µ—Ä—Å –ø—Ä–æ–∫—Å–∏ (Caddy)"
    ["NODE_MENU_CADDY_ONLY"]="üåê –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy"
    ["CADDY_CONTAINER_STARTED"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy –∑–∞–ø—É—â–µ–Ω."
    ["WAITING_FOR_CONTAINER_START"]="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Remnawave"
    ["CONTAINER_START_SUCCESS"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Remnawave —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    ["ENTER_DOMAIN_CADDY"]="üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è Caddy: "
    ["ENTER_SSL_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á SSL-CERT KEY: "
    ["CADDY_INSTALL_START"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
    ["CHECK_CADDY_NETWORK"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker: remnanode-network..."
    ["SUCCESS_CREATE_NETWORK"]="‚úÖ –°–µ—Ç—å 'remnanode-network' —Å–æ–∑–¥–∞–Ω–∞."
    ["NETWORK_EXISTS"]="‚úÖ –°–µ—Ç—å 'remnanode-network' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    ["CREATE_CADDY_DIRS"]="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: \$CADDY_CONFIG_DIR –∏ \$CADDY_WWW_DIR..."
    ["CREATE_CADDYFILE"]="üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Caddyfile..."
    ["SUCCESS_CADDYFILE"]="‚úÖ Caddyfile —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω."
    ["CREATE_CADDY_COMPOSE"]="üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose.yml..."
    ["SUCCESS_CADDY_COMPOSE"]="‚úÖ docker-compose.yml —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω."
    ["WEBPAGE_SETUP_HEADER"]="--- üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã ---"
    ["WEBPAGE_SETUP_INFO1"]="‚ÑπÔ∏è –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞–≥–ª—É—à–∫–∏) –¥–ª—è VPN."
    ["WEBPAGE_SETUP_INFO2"]="‚ÑπÔ∏è –¢—Ä–∞—Ñ–∏–∫ —Å –ø–æ—Ä—Ç–∞ 8443 –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É."
    ["WEBPAGE_SETUP_INFO3"]="üí° –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–µ, –≤–≤–µ–¥–∏—Ç–µ '0' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    ["ENTER_WEBPAGE_PATH"]="üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–∞—à–µ–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /home/user/index.html) –∏–ª–∏ '0' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: "
    ["COPYING_FILE"]="‚öôÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ \$WEB_FILE_PATH –≤ \$CADDY_WWW_DIR"
    ["SUCCESS_COPY_FILE"]="‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
    ["WEBPAGE_SKIP"]="‚è≠Ô∏è –®–∞–≥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–ø—É—â–µ–Ω."
    ["START_CADDY_CONTAINER"]="‚öôÔ∏è –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Caddy..."
    ["CADDY_ALREADY_RUNNING"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
    ["CADDY_INSTALL_COMPLETE"]="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy –≤ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["CADDY_CONTAINER_EXISTS"]="‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    ["CADDY_CONTAINER_DELETE_PROMPT"]="‚ùì –£–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ? (y/n): "
    ["CADDY_CONTAINER_DELETING"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    ["CADDY_CONTAINER_DELETED"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
    ["CADDY_CONTAINER_KEEP"]="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω."
    ["NODE_MENU_FIREWALL_ONLY"]="üß± –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall"
    ["FIREWALL_SETUP_START"]="üß± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall..."
    ["IPTABLES_NOT_FOUND"]="‚ö†Ô∏è iptables –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
    ["IPTABLES_INSTALL_SUCCESS"]="‚úÖ iptables —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    ["IPTABLES_ALREADY_INSTALLED"]="‚úÖ iptables —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    ["APPLYING_IPTABLES"]="üß± –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª iptables..."
    ["IPTABLES_SUCCESS"]="‚úÖ –ü—Ä–∞–≤–∏–ª–∞ iptables —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."
    ["FIREWALL_SETUP_COMPLETE"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["OTHER_MENU_IPTABLES_SAVE"]="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ Iptables"
    ["MENU_WARP"]="üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WARP Proxy"
    ["WARP_PROXY_PROMPT"]="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å WARP?"
    ["WARP_PROXY_MENU_HEADER"]="üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WARP Proxy"
    ["WARP_PROXY_MENU_INSTALL"]="‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WARP Native"
    ["WARP_PROXY_MENU_UNINSTALL"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ WARP Native"
    ["WARP_PROXY_MENU_STATUS"]="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å WARP Native"
    ["WARP_STATUS_HEADER"]="üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WARP"
    ["WARP_INSTALL_CONNECT_START"]="‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WARP. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    ["WARP_PROXY_INSTALL_START"]="‚öôÔ∏è –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WARP Native..."
    ["WARP_PROXY_UNINSTALL_START"]="‚öôÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è WARP Native..."
    ["WARP_PROXY_STOPPING"]="üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ warp..."
    ["WARP_PROXY_REMOVING_FILES"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    ["WARP_PROXY_REMOVING_PACKAGES"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ wireguard..."
    ["WARP_PROXY_INSTALL_SUCCESS"]="‚úÖ WARP Native —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    ["WARP_PROXY_UNINSTALL_COMPLETE"]="‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ WARP Native –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    ["WARP_PROXY_STATUS_CHECK"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WARP Native..."
    ["WARP_PROXY_STATUS_RUNNING"]="‚úÖ WARP Native –∞–∫—Ç–∏–≤–µ–Ω."
    ["WARP_PROXY_STATUS_NOT_RUNNING"]="‚ùå WARP Native –Ω–µ –∑–∞–ø—É—â–µ–Ω."
    ["DEPENDENCY_CHECK"]="‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    ["WARP_INSTALL_CHECK_OS"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    ["WARP_INSTALL_DEPENDENCIES"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    ["WARP_INSTALL_ADD_REPO"]="üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Cloudflare..."
    ["WARP_INSTALL_CONFIGURE"]="‚öôÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WARP..."
    ["WARP_INSTALL_FINAL_CHECK"]="üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WARP..."
    ["WARP_INSTALL_FINAL_SUCCESS"]="‚úÖ WARP —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω."
    ["WARP_INSTALL_COMPLETE"]="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WARP –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    # === –û—á–∏—Å—Ç–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ===
    ["MENU_PROMPT_DELETE"]="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
    ["CLEANUP_START"]="üóëÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—á–∏—Å—Ç–∫–∏..."
    ["CLEANUP_CONTAINERS"]="üóëÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    ["CLEANUP_CONTAINERS_SUCCESS"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnanode –∏ Caddy –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã."
    ["CLEANUP_DIRS"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π /opt/remnanode –∏ /opt/remnawave/caddy..."
    ["CLEANUP_DIRS_SUCCESS"]="‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
    ["CLEANUP_VOLUMES_PROMPT"]="‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ Docker volumes –∏ —Å–µ—Ç–∏? (Y/N): "
    ["CLEANUP_VOLUMES_SUCCESS"]="‚úÖ –í—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes —É–¥–∞–ª–µ–Ω—ã."
    ["CLEANUP_NETWORKS_SUCCESS"]="‚úÖ –í—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã."
    ["CLEANUP_RESTART_DOCKER"]="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker-—Å–µ—Ä–≤–∏—Å–∞..."
    ["CLEANUP_RESTART_SUCCESS"]="‚úÖ Docker-—Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    ["CLEANUP_IPTABLES"]="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª iptables..."
    ["CLEANUP_IPTABLES_SUCCESS"]="‚úÖ –ü—Ä–∞–≤–∏–ª–∞ iptables —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã."
    ["CLEANUP_COMPLETE"]="‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –±—ç–∫–∞–ø –∏ –ø—Ä–æ—á–µ–µ ===
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–æ–≤ ===
    ["BACKUP_MENU_HEADER"]="üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–∞"
    ["BACKUP_MENU_DB_AND_DIR"]="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Remnawave"
    ["BACKUP_MENU_DB_ONLY"]="–¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    ["BACKUP_MENU_ALL_OPT"]="–í—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt"
    ["PROMPT_SELECT_BACKUP_TYPE"]="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–∞:"
    ["PROMPT_SCHEDULE_BACKUP"]="–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø? (Y/N): "
    ["PROMPT_FOUND_CONFIG"]="–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö? (Y/N): "
    ["PROMPT_USING_SAVED_CONFIG"]="–ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram."
    ["PROMPT_SETUP_TELEGRAM"]="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (Y/N): "
    ["TELEGRAM_INFO_1"]="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –Ω–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞."
    ["TELEGRAM_INFO_2"]="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–º—É –±–æ—Ç—É, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.telegram.org/bot<TOKEN>/getUpdates"
    ["TELEGRAM_INFO_3"]="–ó–∞–º–µ–Ω–∏—Ç–µ <TOKEN> –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω. Chat ID –±—É–¥–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ –∫–∞–∫ 'id'."
    ["PROMPT_TELEGRAM_TOKEN"]="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: "
    ["PROMPT_CHAT_ID"]="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Chat ID: "
    ["SAVING_NEW_SETTINGS"]="–°–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
    ["CONFIG_SAVED_SUCCESS"]="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ "
    ["SEARCHING_DB_CONFIG"]="–ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    ["DB_CONFIG_FOUND"]="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞."
    ["DB_INFO_EXTRACTED"]="–î–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã."
    ["DB_URL_NOT_FOUND"]="DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    ["DB_ENV_NOT_FOUND"]="–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    ["DOCKER_NOT_RUNNING"]="Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    ["DOCKER_INSTALL_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    ["SCRIPT_SAVED"]="–°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ "
    ["RUNNING_ONE_TIME_BACKUP"]="–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –±—ç–∫–∞–ø–∞..."
    ["CRON_SETUP_HEADER"]="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ (Cron)"
    ["CRON_SCHEDULE_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤:"
    ["CRON_DAILY"]="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–≤ 03:00)"
    ["CRON_TWICE_DAILY"]="–î–≤–∞–∂–¥—ã –≤ –¥–µ–Ω—å (–≤ 03:00 –∏ 15:00)"
    ["CRON_WEEKLY"]="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00)"
    ["CRON_CUSTOM"]="–î—Ä—É–≥–æ–µ (–≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cron)"
    ["CRON_CHOICE_PROMPT"]="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä (1-4): "
    ["CRON_INVALID_CHOICE"]="–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00."
    ["CRON_SCHEDULE_SAVED"]="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Cron: "
    ["BACKUP_DONE_NO_CRON"]="–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    ["PRESS_ENTER_TO_RETURN"]="–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    ["BACKUP_FILES_NOTE"]="–§–∞–π–ª—ã –±—ç–∫–∞–ø–æ–≤ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫–µ /opt/backups"
    ["TELEGRAM_CAPTION"]="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Remnawave:"
    ["CLEANING_PROGRESS"]="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    ["BACKUPS_OVER_LIMIT"]="–ù–∞–π–¥–µ–Ω–æ %s –±—ç–∫–∞–ø–æ–≤. –£–¥–∞–ª—è—é %s —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    ["NO_CLEANUP_NEEDED"]="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    ["BACKUP_START"]="–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞..."
    ["CREATING_TEMP_DIR"]="–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    ["CREATING_DB_DUMP"]="–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    ["DB_DUMP_ERROR"]="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö %s."
    ["DB_DUMP_SUCCESS"]="–î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    ["COPYING_REMAWAVE_DIR"]="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/remnawave..."
    ["COPYING_ALL_OPT"]="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt..."
    ["DB_ONLY_BACKUP_SELECTED"]="–í—ã–±—Ä–∞–Ω –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –§–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã."
    ["CREATING_SINGLE_ARCHIVE"]="–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞..."
    ["ARCHIVE_ERROR"]="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞."
    ["ARCHIVE_SUCCESS"]="–ï–¥–∏–Ω—ã–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:"
    ["DELETING_TEMP_DIR"]="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    ["BACKUP_SCRIPT_COMPLETE"]="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. ‚úÖ"
    ["TELEGRAM_BACKUP_SUCCESS"]="üìÖ –î–∞—Ç–∞: %s\n‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    ["MENU_NODE"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–¥—ã Remnanode"
    ["MENU_PANEL"]="üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["MENU_BACKUP"]="üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
    ["MENU_OTHER"]="‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
    ["MENU_WARP"]="üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WARP Proxy"
    ["ABOUT_HEADER"]="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–ø—Ç–µ"
    ["ABOUT_INFO"]="–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–¥–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å\n–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN-—Å–µ—Ä–≤–µ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º,\n–æ—Å–≤–æ–±–æ–¥–∏–≤ –≤–∞—Å –æ—Ç —Ä—É—Ç–∏–Ω—ã –∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\nüßë‚Äçüíª –ó–∞–±—É–¥—å—Ç–µ –æ —á–∞—Å–∞—Ö, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: –æ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ Docker –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π\n–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Remnawave –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN-–Ω–æ–¥—ã. –û–Ω\n–±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º\n—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.\n\n‚ú® –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\nüöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π VPN-—Å–µ—Ä–≤–µ—Ä.\nüõ°Ô∏è –ü–æ–≤—ã—Å–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, —Å–æ–∑–¥–∞–≤\n–æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–∏–≤ SSH-–∫–ª—é—á–∏.\nüî• –ù–∞—Å—Ç—Ä–æ–∏—Ç—å firewall, –æ—Ç–∫—Ä—ã–≤ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ—Ä—Ç—ã,\n—á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º.\n‚ö°Ô∏è –¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å WARP –æ—Ç Cloudflare."
    ["MENU_CLEANUP"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –ø–∞–ø–æ–∫ Remnawave/Remnanode"
    ["MENU_EDIT_CONFIG"]="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env"
    ["MENU_VIEW_CONFIG"]="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ .env"
    ["MENU_DELETE"]="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ"
    ["MENU_EXIT"]="üö™ –í—ã—Ö–æ–¥"
    ["GO_BACK"]="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    ["MENU_PROMPT"]="üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
    ["ENTER_YOUR_CHOICE"]="‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: "
    ["INVALID_INPUT"]="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    ["RETURNING"]="‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    ["OPERATION_CANCELLED"]="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    ["AUTHOR"]="By Hopper"
    ["MENU_PROMPT_SELECT"]="–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚Üë‚Üì, –í—ã–±–æ—Ä: Enter"
    ["MAIN_MENU_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ["START_MENU_ABOUT"]="‚ÑπÔ∏è –û —Å–∫—Ä–∏–ø—Ç–µ"
    ["PROCEED_WITHOUT_CONFIG"]="‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º."
    ["CONFIG_SETUP_PROMPT"]="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö —Å–µ–π—á–∞—Å?"
    ["CONFIG_REQUIRED_INFO"]="–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ –≤ –º–µ–Ω—é '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env'."
    ["WELCOME_HEADER"]="üëã Remnawave Manager"
    ["WELCOME_TEXT1"]="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ"
    ["WELCOME_TEXT2"]="—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
    ["WELCOME_TEXT3"]="–Ω–æ–¥—É, –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø."
    ["STARTUP_ANIMATION_TEXT"]="üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞..."
    ["STARTUP_ANIMATION_TEXT_2"]="‚è≥ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑"
    ["seconds_suffix"]="—Å–µ–∫—É–Ω–¥"
    ["STARTUP_ANIMATION_SUCCESS"]="‚úÖ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    ["EXITING_SCRIPT"]="üö™ –í—ã—Ö–æ–¥..."
    ["FULL_INSTALL_COMPLETE"]="üéâ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    ["PANEL_MENU_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ Remnawave:"
    ["PANEL_MENU_HEADER"]="üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["PANEL_MENU_FULL_INSTALL"]="‚öôÔ∏è –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave"
    ["PANEL_MENU_UPLOAD_DB"]="‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–Ω–µ–ª—å"
    ["PANEL_MENU_CHANGE_DOMAIN"]="üåê –°–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏"
    ["PANEL_MENU_CHECK_ERRORS"]="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞ –æ—à–∏–±–∫–∏"
    ["PANEL_MENU_STATUS"]="üìã –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª–∏"
    ["PANEL_INSTALL_START"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave..."
    ["PANEL_INSTALL_COMPLETE"]="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ Remnawave –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    ["RUN_CONTAINERS_PANEL"]="üì¶ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Remnawave..."
    ["BACKUP_OPTIONS_HEADER"]="üíæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–∞:"
    ["BACKUP_DB_ONLY"]="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    ["BACKUP_DB_AND_REMAWAVE"]="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞–ø–∫–∞ remnawave"
    ["BACKUP_ALL_OPT"]="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å—è –ø–∞–ø–∫–∞ /opt"
    ["PROMPT_SCHEDULE_BACKUP"]="–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?"
    ["PROMPT_FOUND_CONFIG"]="–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ?"
    ["PROMPT_USING_SAVED_CONFIG"]="‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram."
    ["PROMPT_SETUP_TELEGRAM"]="–í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –±—ç–∫–∞–ø–æ–≤ –≤ Telegram?"
    ["TELEGRAM_INFO_1"]="‚ÑπÔ∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–æ–≤ –≤ Telegram, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞."
    ["TELEGRAM_INFO_2"]="1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É /newbot –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    ["TELEGRAM_INFO_3"]="2. –ù–∞–π–¥–∏—Ç–µ @userinfobot –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID —á–∞—Ç–∞."
    ["PROMPT_TELEGRAM_TOKEN"]="üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞: "
    ["PROMPT_CHAT_ID"]="üÜî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID: "
    ["SAVING_NEW_SETTINGS"]="–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª .env..."
    ["CONFIG_SAVED_SUCCESS"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ "
    ["SEARCHING_DB_CONFIG"]="üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ .env –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ë–î..."
    ["DB_CONFIG_FOUND"]="‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ."
    ["DB_INFO_EXTRACTED"]="‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞."
    ["DB_URL_NOT_FOUND"]="‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    ["DB_ENV_NOT_FOUND"]="‚ö†Ô∏è –§–∞–π–ª /opt/remnawave/.env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    ["DOCKER_NOT_RUNNING"]="‚ùå –û—à–∏–±–∫–∞: Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
    ["DOCKER_INSTALL_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω."
    ["SCRIPT_SAVED"]="‚úÖ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: "
    ["RUNNING_ONE_TIME_BACKUP"]="üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–æ–≤—ã–π –±—ç–∫–∞–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å..."
    ["CRON_SETUP_HEADER"]="--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (cron) ---"
    ["CRON_SCHEDULE_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±—ç–∫–∞–ø:"
    ["CRON_DAILY"]="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (–≤ 03:00)"
    ["CRON_TWICE_DAILY"]="–î–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (–≤ 03:00 –∏ 15:00)"
    ["CRON_WEEKLY"]="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00)"
    ["CRON_CUSTOM"]="–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ["CRON_CHOICE_PROMPT"]="–í–∞—à –≤—ã–±–æ—Ä (1-4): "
    ["CRON_INVALID_CHOICE"]="–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ."
    ["CRON_SCHEDULE_SAVED"]="‚úÖ Cron-–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: "
    ["BACKUP_DONE_NO_CRON"]="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–æ–≤—ã–π –±—ç–∫–∞–ø. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ–Ω—é —Å–Ω–æ–≤–∞."
    ["PRESS_ENTER_TO_RETURN"]="–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
    ["BACKUP_START"]="–ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞..."
    ["CREATING_TEMP_DIR"]="–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞..."
    ["CREATING_DB_DUMP"]="–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    ["DB_DUMP_ERROR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä "
    ["DB_DUMP_SUCCESS"]="‚úÖ –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
    ["COPYING_REMAWAVE_DIR"]="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/remnawave –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É..."
    ["COPYING_ALL_OPT"]="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É..."
    ["DB_ONLY_BACKUP_SELECTED"]="–í—ã–±—Ä–∞–Ω –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    ["CREATING_SINGLE_ARCHIVE"]="–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    ["ARCHIVE_ERROR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."
    ["ARCHIVE_SUCCESS"]="‚úÖ –ï–¥–∏–Ω—ã–π –±—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: "
    ["SENDING_TELEGRAM_ARCHIVE"]="–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –≤ Telegram"
    ["CLEANING_OLD_BACKUPS"]="–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã..."
    ["DELETING_TEMP_DIR"]="–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    ["BACKUP_SCRIPT_COMPLETE"]="‚úÖ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É."
    ["TELEGRAM_CAPTION"]="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: "
    ["BACKUP_FILES_NOTE"]="# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –≤–∫–ª—é—á–∞—é—Ç: 1. –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 2. –ö–æ–ø–∏—é –ø–∞–ø–∫–∏ /opt/remnawave (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ) 3. –ö–æ–ø–∏—é –≤—Å–µ–π –ø–∞–ø–∫–∏ /opt (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ)"
    ["CLEANING_PROGRESS"]="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    ["BACKUPS_OVER_LIMIT"]="–ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤ –±–æ–ª—å—à–µ %s. –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: %s —à—Ç."
    ["NO_CLEANUP_NEEDED"]="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    ["DELETING_OLD_FILES"]="–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: "
    ["OTHER_MENU_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
    ["MENU_BACKUP"]="üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ç–∫–∞–ø–∞"
    ["CONF_FILE_PROMPT"]="‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): "
    ["CONF_FILE_NOT_FOUND_PROMPT"]="‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–π—á–∞—Å? (y/n): "
    ["PROCEED_WITHOUT_CONFIG"]="‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º."
    ["CONF_FILE_FOUND"]="üîç –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫..."
    ["CONF_FILE_SUCCESS"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    ["CONF_FILE_NOT_FOUND"]="‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
    ["SAVE_SETTINGS_START"]="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª .env..."
    ["SAVE_SETTINGS_SUCCESS"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç."
    ["BACKUP_DB_AND_REMNASOFT"]="üíæ –ë—ç–∫–∞–ø –ë–î + –ø–∞–ø–∫–∏ /opt/remnawave"
    ["BACKUP_OPT_DIR"]="üíæ –ë—ç–∫–∞–ø –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt"
    ["BACKUP_IN_PROGRESS"]="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)..."
    ["OTHER_SETTINGS_HEADER"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    ["OTHER_SETTINGS_IN_PROGRESS"]="‚è≥ –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)..."
    ["OTHER_MENU_IPV6_TOGGLE"]="üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å IPv6"
    ["OTHER_MENU_SSH_USER"]="üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ["DISABLE_TELEGRAM_SENDING"]="üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram"
    ["SYSTEM_UPDATE"]="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    ["BACKUP_MENU_HEADER"]="üíæ –ú–µ–Ω—é –±—ç–∫–∞–ø–∞"
    ["BACKUP_MENU_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–∞:"
    ["BACKUP_DB_ONLY"]="üíæ –ë—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Docker)"
    ["BACKUP_DB_ONLY_HEADER"]="üíæ –ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    ["BACKUP_DB_AND_REMNASOFT_HEADER"]="üíæ –ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –ë–î –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/remnawave"
    ["BACKUP_OPT_DIR_HEADER"]="üíæ –ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt"
    ["BACKUP_INSTRUCTIONS_1"]="‚ÑπÔ∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–æ–≤ –≤ Telegram, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞."
    ["BACKUP_INSTRUCTIONS_2"]="1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É /newbot –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞."
    ["BACKUP_INSTRUCTIONS_3"]="2. –ù–∞–π–¥–∏—Ç–µ @userinfobot –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID —á–∞—Ç–∞."
    ["ENTER_TELEGRAM_TOKEN"]="üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞: "
    ["ENTER_CHAT_ID"]="üÜî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID: "
    ["PROMPT_TELEGRAM_ENABLE"]="‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –±—ç–∫–∞–ø–æ–≤ –≤ Telegram? (y/n) "
    ["DISABLE_TELEGRAM_HEADER"]="üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"
    ["CONFIRM_DISABLE_TELEGRAM"]="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –±—ç–∫–∞–ø–æ–≤ –≤ Telegram? (y/n) "
    ["PROMPT_AUTOMATIC_BACKUP"]="‚ùì –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø? (y/n) "
    ["SINGLE_BACKUP_INFO"]="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–∑–æ–≤—ã–π –±—ç–∫–∞–ø. –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞."
    ["CRON_SETUP_HEADER"]="--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---"
    ["CRON_SETUP_PROMPT"]="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±—ç–∫–∞–ø:"
    ["CRON_CHOICE_PROMPT"]="–í–∞—à –≤—ã–±–æ—Ä (1-4): "
    ["CRON_CUSTOM_HINT"]="üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –±—ç–∫–∞–ø–∞ –≤—Ä—É—á–Ω—É—é –≤ cron."
    ["DAILY_BACKUP"]="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (03:00 AM)"
    ["TWICE_DAILY_BACKUP"]="–î–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (03:00 AM –∏ 03:00 PM)"
    ["WEEKLY_BACKUP"]="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00 AM)"
    ["CUSTOM_BACKUP"]="–í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ["ENTER_CUSTOM_CRON"]="–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ cron (–Ω–∞–ø—Ä–∏–º–µ—Ä, '0 */6 * * *' –¥–ª—è –∫–∞–∂–¥—ã—Ö 6 —á–∞—Å–æ–≤): "
    ["CLEANING_OLD_BACKUPS"]="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤..."
    ["REMOVING_OLD_BACKUPS"]="–ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤ –±–æ–ª—å—à–µ 50. –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤:"
    ["NO_CLEANUP_NEEDED"]="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    ["STARTING_BACKUP"]="–ó–∞–ø—É—Å–∫ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL..."
    ["SENDING_TO_TELEGRAM"]="–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞ –≤ Telegram..."
    ["TELEGRAM_SUCCESS"]="‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram."
    ["BACKUP_SCRIPT_CREATED"]="‚úÖ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
    ["LAUNCHING_BACKUP_SCRIPT"]="üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞..."
    ["CRON_SUCCESS"]="‚úÖ Cron-–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ë—ç–∫–∞–ø –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
    ["BACKUP_SUCCESS"]="‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:"
    ["TELEGRAM_DISABLED_SUCCESS"]="‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
    ["BACKUP_REMNAWAVE_SUCCESS"]="‚úÖ –ë—ç–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Remnawave —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:"
    ["BACKUP_ALL_OPT_SUCCESS"]="‚úÖ –ë—ç–∫–∞–ø –≤—Å–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:"
    ["FOUND_ENV_FILE"]="‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ."
    ["PARSED_DB_INFO"]="‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞."
    ["SCRIPT_COMPLETE"]="‚úÖ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É."
    ["ENTER_DOMAIN_FOR_NODE_IP"]="üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ REMNAWAVE (—ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ –Ω–æ–¥—ã): "
    ["MANUAL_IP_PROMPT"]="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    ["MANUAL_IP_INPUT"]="‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏ –≤—Ä—É—á–Ω—É—é: "
    ["PLEASE_ENTER_DATA"]="üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
    ["INPUT_REQUIRED"]="‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    ["PASSWORD_REQUIRED"]="‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    # === –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ===
    ["ERROR_DUMP_CREATION"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    ["TELEGRAM_ERROR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –≤ Telegram."
    ["ERROR_BACKUP_SAVE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–º–ø –Ω–∞ —Ö–æ—Å—Ç-–º–∞—à–∏–Ω–µ."
    ["CRON_DEFAULT_MESSAGE"]="–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ."
    ["DATABASE_URL_NOT_FOUND"]="‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ .env. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    ["ENV_FILE_NOT_FOUND_BACKUP"]="‚ö†Ô∏è –§–∞–π–ª /opt/remnawave/.env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    ["BACKUP_SCRIPT_NOT_FOUND"]="‚ùå –û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ—á–µ–≥–æ –æ—Ç–∫–ª—é—á–∞—Ç—å."
    ["ERROR_IPTABLES_SAVE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ Iptables."
    ["CONF_FILE_NOT_FOUND_PROMPT_EDIT"]="‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∫—Ä–∏–ø—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ."
    ["CONFIG_FILE_NOT_FOUND_VIEW"]="‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω."
    ["LOG_ERROR_FOUND"]="üö® –û–®–ò–ë–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!"
    ["LOG_ERROR_DB_CONNECT"]="‚ö†Ô∏è –í–∞—à –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave' –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    ["LOG_ERROR_REASON"]="‚ö†Ô∏è –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (volumes) –º–µ—à–∞—é—Ç."
    ["LOG_ERROR_RECOMMENDATION"]="‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Ç–æ–º–∞."
    ["CLEANUP_CANCELED"]="‚ö†Ô∏è –û—Ç–º–µ–Ω–∞. –¢–æ–º–∞ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
    ["ERROR_CREATE_DIR_PANEL"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /opt/remnawave. –í—ã—Ö–æ–¥."
    ["ERROR_DOWNLOAD_FILES_PANEL"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã. –í—ã—Ö–æ–¥."
    ["ERROR_RUN_CONTAINERS_PANEL"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnawave."
    ["CADDY_INSTALL_ERROR_PANEL"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Caddy. –í—ã—Ö–æ–¥."
    ["PANEL_UNREACHABLE_DNS_FW"]="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ \$url. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS-–∑–∞–ø–∏—Å—å –∏ Firewall."
    ["PANEL_UNREACHABLE_CADDY"]="‚ö†Ô∏è –ü–∞–Ω–µ–ª—å Remnawave –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (HTTP –∫–æ–¥: \$http_code). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Caddy."
    ["ERROR_CREATE_DIR_REMNANODE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–µ–µ."
    ["ERROR_START_REMNANODE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Remnanode."
    ["ERROR_LOGS_FOUND"]="‚ö†Ô∏è –û—à–∏–±–∫–∞: –í –ª–æ–≥–∞—Ö Remnanode –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞."
    ["ERROR_LOGS_REASONS"]="‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤ —Å Caddy."
    ["ERROR_LOGS_HINT"]="üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥–∏ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç—ã –Ω–µ –∑–∞–Ω—è—Ç—ã."
    ["ERROR_CONFIG_PROFILE_NOT_FOUND"]="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    ["ERROR_GET_INBOUNDS"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–±–∞—É–Ω–¥–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, API-–∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è."
    ["NO_INBOUNDS_FOUND"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞ –≤ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏."
    ["ERROR_NO_INBOUND_SELECTED"]="‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–±–∞—É–Ω–¥. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    ["DOCKER_COMPOSE_NOT_INSTALLED"]="‚ùå –û—à–∏–±–∫–∞: Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    ["DOCKER_COMPOSE_NOT_INSTALLED_HINT"]="üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    ["DOCKER_INSTALL_ERROR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker. –í—ã—Ö–æ–¥."
    ["DOCKER_RESTART_ERROR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker. –í—ã—Ö–æ–¥."
    ["ERROR_CREATE_CADDY_DIR"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Caddy."
    ["ERROR_CADDY_CD"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Caddy."
    ["CADDYFILE_IS_DIR"]="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'Caddyfile'. –£–¥–∞–ª–µ–Ω–∏–µ..."
    ["CADDY_AUTOFIX_START"]="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ç–æ–º–æ–≤..."
    ["CADDY_AUTOFIX_SUCCESS"]="‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy –∏ –µ–≥–æ —Ç–æ–º–∞ —É–¥–∞–ª–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞..."
    ["CADDY_AUTOFIX_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443."
    ["CONTAINER_START_TIMEOUT"]="‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (30 —Å–µ–∫—É–Ω–¥). –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ..."
    ["NETWORK_NOT_FOUND"]="‚ö†Ô∏è –°–µ—Ç—å 'remnanode-network' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ..."
    ["ERROR_CREATE_NETWORK"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å Docker."
    ["ERROR_CREATE_CADDYFILE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Caddyfile."
    ["ERROR_CREATE_CADDY_COMPOSE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å docker-compose.yml."
    ["ERROR_COPY_FILE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª."
    ["FILE_NOT_FOUND_SKIP"]="‚ö†Ô∏è –§–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω."
    ["ERROR_START_CADDY"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy."
    ["CHECK_PORT_BUSY"]="üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 8443."
    ["IPTABLES_NOT_FOUND"]="‚ö†Ô∏è iptables –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
    ["ERROR_DOMAIN_RESOLVE_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–º–µ–Ω –≤ IP-–∞–¥—Ä–µ—Å."
    ["MANUAL_IP_PROMPT"]="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
    ["MANUAL_IP_INPUT"]="‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏ –≤—Ä—É—á–Ω—É—é: "
    ["ERROR_CADDYFILE_NOT_FOUND"]="‚ùå –û—à–∏–±–∫–∞: Caddyfile –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ /opt/remnawave/caddy/Caddyfile."
    ["ERROR_ENV_NOT_FOUND"]="‚ùå –û—à–∏–±–∫–∞: .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ /opt/remnawave/.env."
    ["ERROR_UPDATE_CADDYFILE"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Caddyfile."
    ["ERROR_UPDATE_ENV"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª."
    ["ERROR_RESTART_CADDY"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Caddy. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é."
    ["CONTAINER_NOT_FOUND_LOGS"]="‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'remnawave' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏."
    ["WARP_PROXY_INSTALL_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WARP Native."
    ["WARP_INSTALL_UNSUPPORTED_OS"]="‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Ubuntu –∏ Debian."
    ["WARP_INSTALL_FAILED_REPO"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Cloudflare. –í—ã—Ö–æ–¥."
    ["WARP_INSTALL_FAILED_INSTALL"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cloudflare-warp. –í—ã—Ö–æ–¥."
    ["WARP_INSTALL_REGISTER_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ WARP."
    ["WARP_INSTALL_PROXY_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è WARP."
    ["WARP_INSTALL_CONNECT_FAILED"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WARP."
    ["WARP_INSTALL_FINAL_FAIL"]="‚ùå WARP –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é."
    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ IPv6 –∏ Iptables ===
    ["IPV6_TOGGLE_HEADER"]="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ IPv6"
    ["IPV6_STATUS"]="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å IPv6: "
    ["IPV6_DISABLED"]="–í–´–ö–õ–Æ–ß–ï–ù"
    ["IPV6_ENABLED"]="–í–ö–õ–Æ–ß–ï–ù"
    ["PROMPT_DISABLE_IPV6"]="–í—ã —Ö–æ—Ç–∏—Ç–µ –í–´–ö–õ–Æ–ß–ò–¢–¨ IPv6? (y/n) "
    ["PROMPT_ENABLE_IPV6"]="–í—ã —Ö–æ—Ç–∏—Ç–µ –í–ö–õ–Æ–ß–ò–¢–¨ IPv6? (y/n) "
    ["IPV6_DISABLED_SUCCESS"]="‚úÖ IPv6 —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω."
    ["IPV6_ENABLED_SUCCESS"]="‚úÖ IPv6 —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω."
    ["IPTABLES_SAVE_HEADER"]="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª Iptables"
    ["IPTABLES_SAVE_PROMPT"]="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /etc/iptables/rules.v4): "
    ["IPTABLES_SAVE_SUCCESS"]="‚úÖ –ü—Ä–∞–≤–∏–ª–∞ Iptables —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:"
    # === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
    ["EDIT_CONFIG_HEADER"]="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env"
    ["CONF_FILE_PROMPT_EDIT"]="–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ? (y/n) "
    ["VIEW_CONFIG_HEADER"]="üìã –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ .env"
    ["PRESS_ENTER_TO_RETURN"]="–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é..."
    ["SETUP_CONFIG_PROMPT"]="‚ùì –î–ª—è —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª .env? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π:"
    ["CONFIG_SETUP_HEADER"]="‚öôÔ∏è –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ .env"
    ["SETUP_SSH_PROMPT"]="1) üîí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SSH (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)? (y/n): "
    ["ENTER_SSH_PORT"]="üîë –í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç: "
    ["ENTER_NEW_USER"]="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ SSH –∞–∫–∫–∞—É–Ω—Ç–∞: "
    ["ENTER_PASSWORD"]="üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è): "
    ["SSH_KEY_INFO"]="‚ÑπÔ∏è –î–∞–ª–µ–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á. –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π 'cat ~/.ssh/id_rsa.pub' –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ. –ö–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤—Ö–æ–¥–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è."
    ["ENTER_SSH_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á: "
    ["SETUP_CADDY_PROMPT"]="2) üåê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–µ–Ω Caddy –¥–ª—è Node/Panel? (y/n): "
    ["CADDY_INFO"]="‚ÑπÔ∏è –î–æ–º–µ–Ω Caddy –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–æ–¥—ã (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏) –∏–ª–∏ –ø–∞–Ω–µ–ª–∏ (HTTPS). –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Caddy, –≤–≤–µ–¥–∏—Ç–µ '0'."
    ["ENTER_DOMAIN_CADDY"]="üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Caddy (–Ω–∞–ø—Ä–∏–º–µ—Ä, mydomain.com –∏–ª–∏ '0' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): "
    ["SSL_KEY_INFO"]="‚ÑπÔ∏è –ö–ª—é—á SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (HTTPS)."
    ["ENTER_SSL_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç KEY (–µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–æ–º–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ '0'): "
    ["SETUP_PANEL_IP_PROMPT"]="3) üñ•Ô∏è –£–∫–∞–∑–∞—Ç—å IP-–∞–¥—Ä–µ—Å –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ù–æ–¥—ã? (y/n): "
    ["PANEL_IP_INFO"]="‚ÑπÔ∏è IP-–∞–¥—Ä–µ—Å –ø–∞–Ω–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–æ–¥–∞ –º–æ–≥–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–∞–Ω–µ–ª–∏. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–∞–Ω–µ–ª–∏, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥."
    ["ENTER_PANEL_IP"]="‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ Remnawave: "
    ["CONFIG_EXIT_PROMPT"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    ["SKIP_OPTION"]="–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —à–∞–≥."
    ["CONF_FILE_EDIT_PROMPT"]="‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ? (y/n):"
    ["CONF_FILE_NOT_FOUND_CREATE"]="‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å? (y/n):"
    ["CONFIG_SETUP_HEADER"]="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ .env"
    ["CONFIG_SUBMENU_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    ["CONFIG_MENU_SSH"]="1) üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH (–¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)"
    ["CONFIG_MENU_NODE"]="2) üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–æ–¥—ã (Remnanode)"
    ["CONFIG_MENU_BACK"]="0) ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ["OTHER_MENU_REPOSITORIES"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
    ["REPOS_INSTALL_HEADER"]="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"
    ["REPOS_INSTALL_INFO"]="–≠—Ç–æ—Ç —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –∏ –¥–æ–±–∞–≤–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ Docker, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."
    # === .env Configuration Menu ===
    ["CONFIG_SETUP_HEADER"]="‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env"
    ["CONFIG_SUBMENU_PROMPT"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    ["CONFIG_MENU_SSH"]="1) üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ["CONFIG_MENU_NODE"]="2) üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–æ–¥—ã (Remnanode)"
    ["CONFIG_MENU_BACK"]="0) ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    # === SSH Configuration ===
    ["SSH_SETUP_HEADER"]="üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ["ENTER_SSH_PORT"]="üîë –í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç: "
    ["ENTER_NEW_USER"]="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ SSH –∞–∫–∫–∞—É–Ω—Ç–∞: "
    ["ENTER_PASSWORD"]="üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ä–æ–ª—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è): "
    ["SSH_KEY_INFO"]="‚ÑπÔ∏è –î–∞–ª–µ–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –ø–∞—Ä–æ–ª—è.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ Windows –∫–æ–º–∞–Ω–¥–æ–π:\n\tssh-keygen.exe -t ed25519\n–∏–ª–∏ –≤ Linux/macOS –∫–æ–º–∞–Ω–¥–æ–π:\n\tssh-keygen -t ed25519\n–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ ~/.ssh/id_ed25519.pub.\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞."
    ["ENTER_SSH_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á: "
    ["SSH_CONFIG_HEADER"]="üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ["SSH_CONFIG_INFO"]="–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞, –∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ."
    ["SSH_PORT_HEADER"]="–í–≤–µ–¥–∏—Ç–µ SSH –ø–æ—Ä—Ç:"
    ["SSH_PORT_INFO"]="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ 22. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 10000 –¥–æ 30000.\n–≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫."
    ["SSH_PORT_PROMPT"]="–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–æ—Ä—Ç: "
    ["SSH_USER_HEADER"]="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ SSH –∞–∫–∫–∞—É–Ω—Ç–∞:"
    ["SSH_USER_INFO"]="–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–æ 'root' –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å."
    ["SSH_USER_PROMPT"]="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
    ["SSH_PASSWORD_HEADER"]="–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    ["SSH_PASSWORD_INFO"]="–ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç—ã."
    ["SSH_PASSWORD_PROMPT"]="–ü–∞—Ä–æ–ª—å (–Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è): "
    ["SSH_KEY_HEADER"]="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–ª—é—á–∞:"
    ["SSH_KEY_INFO"]="SSH-–∫–ª—é—á–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –ø–∞—Ä–æ–ª—è, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n–ö–ª—é—á —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —á–∞—Å—Ç–∏. –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –≤—Å—Ç–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —á–∞—Å—Ç—å."
    ["SSH_KEY_PROMPT"]="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á: "
    ["NODE_CONFIG_HEADER"]="üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–æ–¥—ã (Remnanode)"
    ["NODE_CONFIG_INFO"]="–ó–¥–µ—Å—å –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–π –Ω–æ–¥—ã –∫ –ø–∞–Ω–µ–ª–∏ Remnawave."
    ["NODE_CONNECT_HEADER"]="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤–∞—à–∞ –Ω–æ–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏:"
    ["NODE_DOMAIN_HEADER"]="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ Remnawave:"
    ["NODE_DOMAIN_PROMPT"]="–î–æ–º–µ–Ω: "
    ["NODE_DOMAIN_ERROR"]="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω –≤ IP-–∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è."
    ["NODE_IP_HEADER"]="–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ Remnawave:"
    ["NODE_IP_PROMPT"]="IP-–∞–¥—Ä–µ—Å: "
    ["CADDY_PROMPT"]="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Caddy (–Ω–∞–ø—Ä–∏–º–µ—Ä, mydomain.com): "
    ["SSL_KEY_HEADER"]="SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (Key):"
    ["SSL_KEY_INFO"]="–≠—Ç–æ—Ç –∫–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É VPN-–Ω–æ–¥–æ–π –∏ –ø–∞–Ω–µ–ª—å—é Remnawave.\n–ë–µ–∑ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –Ω–æ–¥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏. –û–Ω –±–µ—Ä–µ—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ Remnawave –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ù–æ–¥—ã'.\n–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –Ω–æ–¥—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å 'SSL Certificate' –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞."
    ["SSL_KEY_PROMPT"]="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç KEY: "
    
    # === Node Configuration ===
    ["NODE_SETUP_HEADER"]="üíª –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ù–æ–¥—ã (Remnanode)"
    ["SELECT_PANEL_TYPE"]="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –±—É–¥–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏:"
    ["PANEL_TYPE_DOMAIN"]="1) –ü–æ –¥–æ–º–µ–Ω—É"
    ["PANEL_TYPE_IP"]="2) –ü–æ IP-–∞–¥—Ä–µ—Å—É"
    ["ENTER_PANEL_IP"]="‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ Remnawave: "
    ["ENTER_PANEL_DOMAIN"]="üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ Remnawave: "
    ["CADDY_INFO"]="‚ÑπÔ∏è –î–æ–º–µ–Ω Caddy –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–æ–¥—ã (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∞–Ω–µ–ª–∏) –∏–ª–∏ –ø–∞–Ω–µ–ª–∏ (HTTPS)."
    ["ENTER_DOMAIN_CADDY"]="üåê –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω Caddy (–Ω–∞–ø—Ä–∏–º–µ—Ä, mydomain.com): "
    ["SSL_KEY_INFO"]="‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É VPN-–Ω–æ–¥–æ–π –∏ –ø–∞–Ω–µ–ª—å—é Remnawave.\n–ë–µ–∑ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –Ω–æ–¥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏.\n–û–Ω –±–µ—Ä–µ—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏ Remnawave –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ù–æ–¥—ã'. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –Ω–æ–¥—ã, –≤—ã –º–æ–∂–µ—Ç–µ\n—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å 'SSL Certificate' –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞."
    ["ENTER_SSL_KEY"]="üîë –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç KEY: "

    # === General Messages ===
    ["CONF_FILE_PROMPT"]="‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): "
    ["CONF_FILE_NOT_FOUND_PROMPT"]="‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å? (y/n): "
    ["SAVE_SETTINGS_START"]="üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª .env..."
    ["SAVE_SETTINGS_SUCCESS"]="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    ["INPUT_REQUIRED"]="‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è."
    ["PASSWORD_REQUIRED"]="‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
    ["ERROR_REMNANODE_CONFIG"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Remnanode. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ SSH-–∫–ª—é—á–∏ –∏–ª–∏ –¥–æ–º–µ–Ω."
    ["ERROR_PANEL_CONFIG"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–Ω–µ–ª—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã."
    ["ERROR_BACKUP_CONFIG"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—ç–∫–∞–ø. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–∞."
    ["ERROR_OTHER_CONFIG"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    ["ERROR_WARP_CONFIG"]="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WARP."
    ["RETURNING"]="–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é..."
    
)

# –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
lang_en=(
    # === Main Menu and Navigation ===
    ["MENU_NODE"]="1) ‚öôÔ∏è Remnanode Setup"
    ["MENU_PANEL"]="2) üñ•Ô∏è Remnawave Panel Setup"
    ["MENU_BACKUP"]="3) üíæ Create Database Backup"
    ["MENU_OTHER"]="4) ‚öôÔ∏è Other Server Settings"
    ["MENU_WARP"]="5) üõ°Ô∏è WARP Proxy Setup"
    ["MENU_CLEANUP"]="6) üóëÔ∏è Delete and Clean Up Remnawave/Remnanode Processes and Folders"
    ["MENU_EDIT_CONFIG"]="7) üîß Edit .env Configuration File"
    ["MENU_VIEW_CONFIG"]="6) üìã View Current .env Config"
    ["MENU_DELETE"]="8) üóëÔ∏è Delete"
    ["MENU_EXIT"]="0) üö™ Exit"
    ["GO_BACK"]="0) ‚¨ÖÔ∏è Back"
    ["MENU_PROMPT"]="üí° Please select an action: "
    ["ENTER_YOUR_CHOICE"]="‚ùì Enter your choice: "
    ["INVALID_INPUT"]="‚ùå Invalid input. Please try again."
    ["RETURNING"]="‚¨ÖÔ∏è Returning to main menu..."
    ["OPERATION_CANCELLED"]="Operation cancelled."
    ["AUTHOR"]="By Hopper"
    ["MENU_PROMPT_SELECT"]="Navigation: ‚Üë‚Üì, Select: Enter"
    ["MAIN_MENU_PROMPT"]="Please select an action:"
    ["GO_BACK"]="0) ‚¨ÖÔ∏è Back"
    ["OPERATION_CANCELLED"]="Operation cancelled."
    # === Welcome and Service Messages ===
    ["WELCOME_HEADER"]="üëã Remnawave Manager \$Version"
    ["WELCOME_TEXT1"]="Hello! This script will help you quickly and easily"
    ["WELCOME_TEXT2"]="install and configure key components:"
    ["WELCOME_TEXT3"]="node, control panel, and create a backup."
    ["STARTUP_ANIMATION_TEXT"]="üöÄ Starting script..."
    ["STARTUP_ANIMATION_TEXT_2"]="‚è≥ Starting script in"
    ["seconds_suffix"]="seconds"
    ["STARTUP_ANIMATION_SUCCESS"]="‚úÖ Startup complete!"
    ["EXITING_SCRIPT"]="üö™ Exiting..."
    ["FULL_INSTALL_COMPLETE"]="üéâ Full installation complete!"
    # === Remnawave (Panel) Setup ===
    ["PANEL_MENU_PROMPT"]="Select an action for the Remnawave panel:"
    ["PANEL_MENU_HEADER"]="üíª Remnawave Panel Setup"
    ["PANEL_MENU_FULL_INSTALL"]="1) ‚öôÔ∏è Full Remnawave Panel Installation"
    ["PANEL_MENU_UPLOAD_DB"]="2) ‚¨ÜÔ∏è Upload Database to Panel"
    ["PANEL_MENU_CHANGE_DOMAIN"]="3) üåê Change Panel Domain"
    ["PANEL_MENU_CHECK_ERRORS"]="4) üîç Check Panel for Errors"
    ["PANEL_MENU_STATUS"]="6) üìã Panel Status"
    ["PANEL_INSTALL_START"]="‚öôÔ∏è Installing Remnawave Panel..."
    ["PANEL_INSTALL_COMPLETE"]="‚úÖ Remnawave Panel installation complete."
    ["RUN_CONTAINERS_PANEL"]="üì¶ Starting Remnawave containers..."
    ["SUCCESS_CONTAINERS_RUN_PANEL"]="‚úÖ Containers started."
    ["CHECK_PANEL_STATUS_PANEL"]="üîç Checking panel availability at: \$url"
    ["PANEL_SUCCESS_STATUS"]="‚úÖ Remnawave panel is successfully accessible"
    ["CREATE_DIR_PANEL"]="üìÅ Creating directory /opt/remnawave"
    ["SUCCESS_DIR_CREATED_PANEL"]="‚úÖ Directory created. Current directory: \$(pwd)"
    ["DOWNLOAD_FILES_PANEL"]="‚¨áÔ∏è Downloading docker-compose.yml and .env files"
    ["SUCCESS_DOWNLOAD_FILES_PANEL"]="‚úÖ Files successfully downloaded."
    ["ENV_EXISTS_PANEL"]="‚úÖ .env file already exists. Skipping key and password generation."
    ["GENERATE_KEYS_PANEL"]="üîë Generating secret keys..."
    ["SUCCESS_KEYS_GENERATED_PANEL"]="‚úÖ Keys successfully generated."
    ["GENERATE_DB_PASSWORD_PANEL"]="üîë Generating password for PostgreSQL database..."
    ["SUCCESS_DB_PASSWORD_PANEL"]="‚úÖ PostgreSQL password successfully generated."
    ["SET_DOMAIN_PANEL"]="üåê Setting domain for the panel"
    ["SUCCESS_DOMAIN_SET_PANEL"]="‚úÖ Domain set."
    ["PANEL_STATUS_HEADER"]="Checking panel status"
    ["CHECK_PANEL_LOGS_START"]="üîç Checking 'remnawave' container logs for authentication errors..."
    ["NO_DB_AUTH_ERROR"]="‚úÖ No DB authentication errors found in logs. Investigate other potential issues."
    ["CONFIRM_CHANGE_DOMAIN"]="Are you sure you want to change the domain? (y/n) "
    ["CHANGE_DOMAIN_HEADER"]="üåê Change Panel Domain"
    ["ENTER_NEW_DOMAIN"]="‚ùì Enter the new domain (e.g., example.com): "
    ["UPDATING_CADDYFILE"]="Updating Caddyfile..."
    ["SUCCESS_UPDATE_CADDYFILE"]="‚úÖ Caddyfile successfully updated."
    ["UPDATING_ENV"]="Updating .env file..."
    ["SUCCESS_UPDATE_ENV"]="‚úÖ .env file successfully updated."
    ["RESTARTING_CADDY"]="Restarting Caddy..."
    ["SUCCESS_RESTART_CADDY"]="‚úÖ Caddy successfully restarted."
    ["CHANGE_DOMAIN_COMPLETE"]="üéâ Domain change complete!"
    # === Remnanode Setup ===
    ["NODE_MENU_PROMPT"]="Select a node installation option:"
    ["NODE_MENU_HEADER"]="üíª Remnanode Setup"
    ["NODE_MENU_FULL_INSTALL"]="1) ‚öôÔ∏è Full Installation (Docker, Remnanode, Caddy, Firewall)"
    ["NODE_MENU_NODE_ONLY"]="3) ‚öôÔ∏è Remnanode Configuration Only"
    ["NODE_MENU_ADD_NODE_AUTO"]="6) ‚ú® Automatic Node Addition (In Development)"
    ["SETUP_REMNANODE"]="‚öôÔ∏è Setting up Remnanode..."
    ["CREATE_REMNANODE_DIR"]="üìÅ Creating /opt/remnanode"
    ["CREATE_ENV_FILE"]="üìù Creating/updating .env file with security key"
    ["SUCCESS_ENV_FILE"]="‚úÖ .env file created/updated with security key"
    ["CHECK_DOCKER_COMPOSE"]="üîç Checking docker-compose.yml"
    ["CREATE_DOCKER_COMPOSE"]="üìù docker-compose.yml created"
    ["DOCKER_COMPOSE_EXISTS"]="‚úÖ docker-compose.yml file already exists"
    ["START_REMNANODE_CONTAINER"]="üì¶ Starting Remnanode container"
    ["REMNANODE_SETUP_COMPLETE"]="‚úÖ Remnanode setup complete."
    ["CHECK_REMNANODE_LOGS_HEADER"]="--- üìã Checking Remnanode Logs ---"
    ["LOGS_CLEAN"]="‚úÖ Remnanode logs are clean. No critical errors found."
    ["ADD_NODE_AUTO_HEADER"]="Automatic Node Addition to Panel"
    ["GETTING_TOKEN"]="Getting access token..."
    ["GETTING_CONFIG_PROFILE_UUID"]="Getting configuration profile UUID..."
    ["SELECT_INBOUND"]="Getting list of inbounds. Select one:"
    ["ENTER_NODE_DETAILS"]="Enter details for the new node:"
    ["ENTER_NODE_DOMAIN"]="Enter the domain or IP address of the new node: "
    ["ENTER_NODE_NAME"]="Enter a name for the new node: "
    ["ADDING_NODE_TO_PANEL"]="Adding node to panel..."
    # === Component Installation and Management (Docker, SSH, Caddy, Firewall, WARP) ===
    ["NODE_MENU_DOCKER_ONLY"]="2) üê≥ Docker Installation Only"
    ["DOCKER_INSTALLING"]="‚öôÔ∏è Installing Docker..."
    ["CHECK_DOCKER"]="üîç Checking Docker"
    ["DOCKER_ALREADY_INSTALLED"]="‚úÖ Docker is already installed"
    ["DOCKER_INSTALL_COMPLETE"]="‚úÖ Docker installation complete."
    ["DOCKER_RESTART_SUCCESS"]="‚úÖ Docker successfully restarted."
    ["NODE_MENU_SSH_ONLY"]="2) üîí SSH and User Setup Only"
    ["SSH_SETUP_START"]="‚öôÔ∏è Setting up SSH and user..."
    ["ENTER_SSH_PORT"]="üîë Enter SSH port: "
    ["ENTER_NEW_USER"]="üë§ Enter new username: "
    ["ENTER_PASSWORD"]="üîë Enter password for the user: "
    ["SSH_KEY_INFO"]="A public SSH key is required for authentication."
    ["ENTER_SSH_KEY"]="üîë Paste your public SSH key: "
    ["CHECK_SSH_PORT"]="üîç Checking SSH port \$SSH_PORT"
    ["SSH_PORT_CONFIGURING"]="‚öôÔ∏è Configuring SSH on port \$SSH_PORT"
    ["SSH_PORT_ALREADY_SET"]="‚úÖ SSH port is already configured"
    ["CHECK_SSH_SECURITY"]="üîç Checking SSH security"
    ["SSH_SECURITY_CONFIGURING"]="‚öôÔ∏è Configuring SSH security"
    ["SSH_SECURITY_ALREADY_SET"]="‚úÖ SSH security is already configured"
    ["CHECK_USER"]="üîç Checking user \$NEW_USER"
    ["USER_CREATING"]="‚öôÔ∏è Creating user \$NEW_USER"
    ["USER_ALREADY_EXISTS"]="‚úÖ User already exists"
    ["CHECK_SSH_KEY"]="üîç Checking SSH key for \$NEW_USER"
    ["SSH_KEY_CONFIGURING"]="‚öôÔ∏è Configuring SSH key for \$NEW_USER"
    ["SSH_KEY_ALREADY_SET"]="‚úÖ SSH key is already configured"
    ["SSH_RESTART"]="üîÑ Restarting SSH"
    ["SSH_SETUP_COMPLETE"]="‚úÖ SSH and user setup complete."
    ["PANEL_MENU_CADDY_ONLY"]="5) üåê Reverse Proxy (Caddy) Installation Only"
    ["NODE_MENU_CADDY_ONLY"]="4) üåê Caddy Installation and Setup Only"
    ["CADDY_CONTAINER_STARTED"]="‚úÖ Caddy container started."
    ["WAITING_FOR_CONTAINER_START"]="‚è≥ Waiting for Remnawave container to start"
    ["CONTAINER_START_SUCCESS"]="‚úÖ Remnawave container successfully started."
    ["ENTER_DOMAIN_CADDY"]="üåê Enter domain for Caddy: "
    ["ENTER_SSL_KEY"]="üîë Paste your SSL-CERT KEY: "
    ["CADDY_INSTALL_START"]="‚öôÔ∏è Installing and configuring Caddy in a Docker container..."
    ["CHECK_CADDY_NETWORK"]="üîç Checking Docker network: remnanode-network..."
    ["SUCCESS_CREATE_NETWORK"]="‚úÖ 'remnanode-network' created successfully."
    ["NETWORK_EXISTS"]="‚úÖ 'remnanode-network' network already exists."
    ["CREATE_CADDY_DIRS"]="üìÅ Creating directories: \$CADDY_CONFIG_DIR and \$CADDY_WWW_DIR..."
    ["CREATE_CADDYFILE"]="üìù Creating/updating Caddyfile..."
    ["SUCCESS_CADDYFILE"]="‚úÖ Caddyfile created/updated."
    ["CREATE_CADDY_COMPOSE"]="üìù Creating/updating docker-compose.yml..."
    ["SUCCESS_CADDY_COMPOSE"]="‚úÖ docker-compose.yml created/updated."
    ["WEBPAGE_SETUP_HEADER"]="--- üñºÔ∏è Webpage Setup ---"
    ["WEBPAGE_SETUP_INFO1"]="‚ÑπÔ∏è This option is for creating a camouflage page (dummy page) for VPN."
    ["WEBPAGE_SETUP_INFO2"]="‚ÑπÔ∏è Traffic from port 8443 will be redirected to this page."
    ["WEBPAGE_SETUP_INFO3"]="üí° If you do not want to create one, enter '0' to skip."
    ["ENTER_WEBPAGE_PATH"]="üìÅ Enter the path to your webpage file (e.g., /home/user/index.html) or '0' to skip: "
    ["COPYING_FILE"]="‚öôÔ∏è Copying file \$WEB_FILE_PATH to \$CADDY_WWW_DIR"
    ["SUCCESS_COPY_FILE"]="‚úÖ File successfully copied!"
    ["WEBPAGE_SKIP"]="‚è≠Ô∏è Webpage setup step skipped."
    ["START_CADDY_CONTAINER"]="‚öôÔ∏è Starting Caddy container..."
    ["CADDY_ALREADY_RUNNING"]="‚úÖ Caddy container is already running."
    ["CADDY_INSTALL_COMPLETE"]="‚úÖ Caddy installation and setup in Docker complete."
    ["CADDY_CONTAINER_EXISTS"]="‚ö†Ô∏è Caddy container already exists."
    ["CADDY_CONTAINER_DELETE_PROMPT"]="‚ùì Delete it before creating a new one? (y/n): "
    ["CADDY_CONTAINER_DELETING"]="üóëÔ∏è Deleting existing container..."
    ["CADDY_CONTAINER_DELETED"]="‚úÖ Container successfully deleted."
    ["CADDY_CONTAINER_KEEP"]="‚ùå Operation cancelled. Existing container kept."
    ["NODE_MENU_FIREWALL_ONLY"]="5) üß± Firewall Setup Only"
    ["FIREWALL_SETUP_START"]="üß± Setting up Firewall..."
    ["IPTABLES_NOT_FOUND"]="‚ö†Ô∏è iptables not found. Installing..."
    ["IPTABLES_INSTALL_SUCCESS"]="‚úÖ iptables successfully installed."
    ["IPTABLES_ALREADY_INSTALLED"]="‚úÖ iptables is already installed."
    ["APPLYING_IPTABLES"]="üß± Applying iptables rules..."
    ["IPTABLES_SUCCESS"]="‚úÖ iptables rules successfully applied."
    ["FIREWALL_SETUP_COMPLETE"]="‚úÖ Firewall setup complete."
    ["OTHER_MENU_IPTABLES_SAVE"]="3) üíæ Save Iptables Rules"
    ["MENU_WARP"]="5) üõ°Ô∏è WARP Proxy Setup"
    ["WARP_PROXY_PROMPT"]="What do you want to do with WARP?"
    ["WARP_PROXY_MENU_HEADER"]="üõ°Ô∏è WARP Proxy Setup"
    ["WARP_PROXY_MENU_INSTALL"]="1) ‚¨áÔ∏è Install WARP Native"
    ["WARP_PROXY_MENU_UNINSTALL"]="2) üóëÔ∏è Uninstall WARP Native"
    ["WARP_PROXY_MENU_STATUS"]="3) üìã Check WARP Native Status"
    ["WARP_STATUS_HEADER"]="üõ°Ô∏è WARP Status Check"
    ["WARP_INSTALL_CONNECT_START"]="‚è≥ Attempting to connect to WARP. This may take a few seconds..."
    ["WARP_PROXY_INSTALL_START"]="‚öôÔ∏è Starting WARP Native installation..."
    ["WARP_PROXY_UNINSTALL_START"]="‚öôÔ∏è Starting WARP Native uninstallation procedure..."
    ["WARP_PROXY_STOPPING"]="üõë Stopping warp interface..."
    ["WARP_PROXY_REMOVING_FILES"]="üóëÔ∏è Removing configuration files..."
    ["WARP_PROXY_REMOVING_PACKAGES"]="üóëÔ∏è Removing wireguard packages..."
    ["WARP_PROXY_INSTALL_SUCCESS"]="‚úÖ WARP Native successfully installed."
    ["WARP_PROXY_UNINSTALL_COMPLETE"]="‚úÖ WARP Native uninstallation complete."
    ["WARP_PROXY_STATUS_CHECK"]="üîç Checking WARP Native status..."
    ["WARP_PROXY_STATUS_RUNNING"]="‚úÖ WARP Native is active."
    ["WARP_PROXY_STATUS_NOT_RUNNING"]="‚ùå WARP Native is not running."
    ["DEPENDENCY_CHECK"]="‚öôÔ∏è Checking and installing necessary dependencies..."
    ["WARP_INSTALL_CHECK_OS"]="üîç Checking operating system..."
    ["WARP_INSTALL_DEPENDENCIES"]="‚öôÔ∏è Installing necessary packages..."
    ["WARP_INSTALL_ADD_REPO"]="üì¶ Adding Cloudflare repository..."
    ["WARP_INSTALL_CONFIGURE"]="‚öôÔ∏è Registering and connecting to WARP..."
    ["WARP_INSTALL_FINAL_CHECK"]="üîç Final WARP status check..."
    ["WARP_INSTALL_FINAL_SUCCESS"]="‚úÖ WARP successfully connected and active."
    ["WARP_INSTALL_COMPLETE"]="‚úÖ WARP installation completed successfully!"
    # === Cleanup and Deletion ===
    ["MENU_PROMPT_DELETE"]="Select what you want to delete:"
    ["CLEANUP_START"]="üóëÔ∏è Starting cleanup procedure..."
    ["CLEANUP_CONTAINERS"]="üóëÔ∏è Stopping and deleting Docker containers..."
    ["CLEANUP_CONTAINERS_SUCCESS"]="‚úÖ Remnanode and Caddy containers stopped and deleted."
    ["CLEANUP_DIRS"]="üóëÔ∏è Deleting /opt/remnanode and /opt/remnawave/caddy directories..."
    ["CLEANUP_DIRS_SUCCESS"]="‚úÖ Directories successfully deleted."
    ["CLEANUP_VOLUMES_PROMPT"]="‚ùì Do you want to delete all Docker volumes and networks? (Y/N): "
    ["CLEANUP_VOLUMES_SUCCESS"]="‚úÖ All unused volumes deleted."
    ["CLEANUP_NETWORKS_SUCCESS"]="‚úÖ All unused networks deleted."
    ["CLEANUP_RESTART_DOCKER"]="üîÑ Restarting Docker service..."
    ["CLEANUP_RESTART_SUCCESS"]="‚úÖ Docker service successfully restarted."
    ["CLEANUP_IPTABLES"]="üóëÔ∏è Clearing iptables rules..."
    ["CLEANUP_IPTABLES_SUCCESS"]="‚úÖ iptables rules successfully reset."
    ["CLEANUP_COMPLETE"]="‚úÖ Cleanup complete. The system has been returned to its initial state."
    # === Settings, Backup, and More ===
    ["OTHER_MENU_PROMPT"]="Select an option:"
    ["MENU_BACKUP"]="3) üíæ Backup Setup"
    ["CONF_FILE_PROMPT"]="‚úÖ .env configuration file found. Use existing settings? (y/n): "
    ["CONF_FILE_NOT_FOUND_PROMPT"]="‚ö†Ô∏è Configuration file not found. Do you want to enter settings now? (y/n): "
    ["PROCEED_WITHOUT_CONFIG"]="‚ö†Ô∏è You chose to proceed without entering settings. Please be aware this may lead to errors."
    ["CONF_FILE_FOUND"]="üîç .env configuration file found. Loading settings..."
    ["CONF_FILE_SUCCESS"]="‚úÖ Settings successfully loaded."
    ["CONF_FILE_NOT_FOUND"]="‚ö†Ô∏è Configuration file not found. Starting interactive setup."
    ["SAVE_SETTINGS_START"]="üíæ Saving settings to .env file..."
    ["SAVE_SETTINGS_SUCCESS"]="‚úÖ Settings saved. The script will load them on the next run."
    ["BACKUP_DB_AND_REMNASOFT"]="2) üíæ DB Backup + /opt/remnawave folder"
    ["BACKUP_OPT_DIR"]="3) üíæ Backup of the entire /opt directory"
    ["BACKUP_IN_PROGRESS"]="‚è≥ Creating backup (in development)..."
    ["OTHER_SETTINGS_HEADER"]="‚öôÔ∏è Server Settings"
    ["OTHER_SETTINGS_IN_PROGRESS"]="‚è≥ Other server settings (in development)..."
    ["OTHER_MENU_IPV6_TOGGLE"]="2) üõ°Ô∏è Enable/Disable IPv6"
    ["OTHER_MENU_SSH_USER"]="1) üîí SSH and User Setup"
    ["DISABLE_TELEGRAM_SENDING"]="4) üö´ Disable auto-sending to Telegram"
    ["SYSTEM_UPDATE"]="üîÑ System Update"
    ["BACKUP_MENU_HEADER"]="üíæ Backup Menu"
    ["BACKUP_MENU_PROMPT"]="Select backup type:"
    ["BACKUP_DB_ONLY"]="1) üíæ Database Backup Only (Docker)"
    ["BACKUP_DB_ONLY_HEADER"]="üíæ Starting Database Backup Only"
    ["BACKUP_DB_AND_REMNASOFT_HEADER"]="üíæ Starting DB and /opt/remnawave directory Backup"
    ["BACKUP_OPT_DIR_HEADER"]="üíæ Starting Backup of the entire /opt directory"
    ["BACKUP_INSTRUCTIONS_1"]="‚ÑπÔ∏è To automatically send backups to Telegram, you need a bot token and a chat ID."
    ["BACKUP_INSTRUCTIONS_2"]="1. Open Telegram and find @BotFather. Write /newbot and follow instructions to create a bot."
    ["BACKUP_INSTRUCTIONS_3"]="2. Find @userinfobot and send it /start to get your chat ID."
    ["ENTER_TELEGRAM_TOKEN"]="üîë Enter your Telegram bot token: "
    ["ENTER_CHAT_ID"]="üÜî Enter your Telegram Chat ID: "
    ["PROMPT_TELEGRAM_ENABLE"]="‚ùì Do you want to set up automatic sending of backups to Telegram? (y/n) "
    ["DISABLE_TELEGRAM_HEADER"]="üö´ Disable automatic sending to Telegram"
    ["CONFIRM_DISABLE_TELEGRAM"]="Are you sure you want to disable automatic sending of backups to Telegram? (y/n) "
    ["PROMPT_AUTOMATIC_BACKUP"]="‚ùì Do you want to set up automatic backup? (y/n) "
    ["SINGLE_BACKUP_INFO"]="‚úÖ One-time backup performed. To automate, use this menu again."
    ["CRON_SETUP_HEADER"]="--- Automatic Scheduling Setup ---"
    ["CRON_SETUP_PROMPT"]="Choose how often to perform a backup:"
    ["CRON_CHOICE_PROMPT"]="Your choice (1-4): "
    ["CRON_CUSTOM_HINT"]="üí° You can also manually configure a custom backup frequency in cron."
    ["DAILY_BACKUP"]="Daily (03:00 AM)"
    ["TWICE_DAILY_BACKUP"]="Twice a day (03:00 AM and 03:00 PM)"
    ["WEEKLY_BACKUP"]="Weekly (every Sunday at 03:00 AM)"
    ["CUSTOM_BACKUP"]="Enter your own schedule"
    ["ENTER_CUSTOM_CRON"]="Enter schedule in cron format (e.g., '0 */6 * * *' for every 6 hours): "
    ["CLEANING_OLD_BACKUPS"]="Cleaning old backups..."
    ["REMOVING_OLD_BACKUPS"]="Found more than 50 backups. Deleting old files:"
    ["NO_CLEANUP_NEEDED"]="Number of backups does not exceed the limit. No cleanup required."
    ["STARTING_BACKUP"]="Starting PostgreSQL database backup..."
    ["SENDING_TO_TELEGRAM"]="Sending backup to Telegram..."
    ["TELEGRAM_SUCCESS"]="‚úÖ Backup successfully sent to Telegram."
    ["BACKUP_SCRIPT_CREATED"]="‚úÖ Backup script created and ready for use:"
    ["LAUNCHING_BACKUP_SCRIPT"]="üöÄ Launching backup script..."
    ["CRON_SUCCESS"]="‚úÖ Cron job successfully added. Backup will run on schedule"
    ["BACKUP_SUCCESS"]="‚úÖ Backup successfully created:"
    ["TELEGRAM_DISABLED_SUCCESS"]="‚úÖ Automatic sending to Telegram successfully disabled."
    ["BACKUP_REMNAWAVE_SUCCESS"]="‚úÖ Remnawave directory backup successfully created:"
    ["BACKUP_ALL_OPT_SUCCESS"]="‚úÖ Entire /opt directory backup successfully created:"
    ["FOUND_ENV_FILE"]="‚úÖ .env file found. Using data from it."
    ["PARSED_DB_INFO"]="‚úÖ Database information successfully extracted."
    ["SCRIPT_COMPLETE"]="‚úÖ Backup script has finished."
    ["ENTER_DOMAIN_FOR_NODE_IP"]="üåê Enter the domain name of your REMNAWAVE panel (this is needed to open the node port): "
    ["MANUAL_IP_PROMPT"]="‚ö†Ô∏è Failed to get IP address. Please enter it manually."
    ["MANUAL_IP_INPUT"]="‚å®Ô∏è Enter IP manually: "
    ["PLEASE_ENTER_DATA"]="üìù Please enter the following required data:"
    ["INPUT_REQUIRED"]="‚ùå This field is required. Please enter a value."
    ["PASSWORD_REQUIRED"]="‚ùå Password cannot be empty. Please enter a value."
    # === Errors and Warnings ===
    ["ERROR_DUMP_CREATION"]="‚ùå Error: Failed to create database dump."
    ["TELEGRAM_ERROR"]="‚ùå Error: Failed to send backup to Telegram."
    ["ERROR_BACKUP_SAVE"]="‚ùå Error: Failed to save dump to the host machine."
    ["CRON_DEFAULT_MESSAGE"]="Invalid choice. Using default schedule: daily."
    ["DATABASE_URL_NOT_FOUND"]="‚ö†Ô∏è DATABASE_URL variable not found in .env file. Using default values."
    ["ENV_FILE_NOT_FOUND_BACKUP"]="‚ö†Ô∏è File /opt/remnawave/.env not found. Using default database values."
    ["BACKUP_SCRIPT_NOT_FOUND"]="‚ùå Error: Backup script not found. Nothing to disable."
    ["ERROR_IPTABLES_SAVE"]="‚ùå Error: Failed to save iptables rules."
    ["CONF_FILE_NOT_FOUND_PROMPT_EDIT"]="‚ùå .env configuration file not found. Please run the main script setup first to create it."
    ["CONFIG_FILE_NOT_FOUND_VIEW"]="‚ùå .env configuration file not found."
    ["LOG_ERROR_FOUND"]="üö® ERROR FOUND!"
    ["LOG_ERROR_DB_CONNECT"]="‚ö†Ô∏è Your 'remnawave' container failed to connect to the database."
    ["LOG_ERROR_REASON"]="‚ö†Ô∏è The most likely reason: old database data (volumes) are interfering."
    ["LOG_ERROR_RECOMMENDATION"]="‚ö†Ô∏è It is recommended to completely delete the old containers and volumes."
    ["CLEANUP_CANCELED"]="‚ö†Ô∏è Canceled. Volumes will not be deleted."
    ["ERROR_CREATE_DIR_PANEL"]="‚ùå Error: Failed to create directory /opt/remnawave. Exiting."
    ["ERROR_DOWNLOAD_FILES_PANEL"]="‚ùå Error: Failed to download files. Exiting."
    ["ERROR_RUN_CONTAINERS_PANEL"]="‚ùå Error: Failed to start Remnawave containers."
    ["CADDY_INSTALL_ERROR_PANEL"]="‚ùå Error: Failed to install Caddy. Exiting."
    ["PANEL_UNREACHABLE_DNS_FW"]="‚ö†Ô∏è Failed to connect to \$url. Check DNS record and Firewall."
    ["PANEL_UNREACHABLE_CADDY"]="‚ö†Ô∏è Remnawave panel is unreachable (HTTP code: \$http_code). Check Caddy configuration."
    ["ERROR_CREATE_DIR_REMNANODE"]="‚ùå Error: Failed to create or navigate to the directory."
    ["ERROR_START_REMNANODE"]="‚ùå Error: Failed to start the Remnanode container."
    ["ERROR_LOGS_FOUND"]="‚ö†Ô∏è Error: A critical error was found in Remnanode logs."
    ["ERROR_LOGS_REASONS"]="‚ö†Ô∏è Possible reasons: Incorrect node configuration or a port conflict with Caddy."
    ["ERROR_LOGS_HINT"]="üí° Please check your configs and make sure the ports are not in use."
    ["ERROR_CONFIG_PROFILE_NOT_FOUND"]="Error: Failed to find the default configuration profile."
    ["ERROR_GET_INBOUNDS"]="‚ùå Error: Failed to get the list of inbounds. The API request may have failed."
    ["NO_INBOUNDS_FOUND"]="‚ùå Error: No inbounds found in your panel."
    ["ERROR_NO_INBOUND_SELECTED"]="‚ùå Error: You did not select an inbound. Operation cancelled."
    ["DOCKER_COMPOSE_NOT_INSTALLED"]="‚ùå Error: Docker or Docker Compose is not installed."
    ["DOCKER_COMPOSE_NOT_INSTALLED_HINT"]="üí° Please install them and try again."
    ["DOCKER_INSTALL_ERROR"]="‚ùå Error: Failed to install Docker. Exiting."
    ["DOCKER_RESTART_ERROR"]="‚ùå Error: Failed to restart Docker. Exiting."
    ["ERROR_CREATE_CADDY_DIR"]="‚ùå Error: Failed to create Caddy directory."
    ["ERROR_CADDY_CD"]="‚ùå Error: Failed to navigate to Caddy directory."
    ["CADDYFILE_IS_DIR"]="‚ö†Ô∏è 'Caddyfile' directory found. Deleting..."
    ["CADDY_AUTOFIX_START"]="‚ö†Ô∏è Startup error detected. Automatically deleting container and volumes..."
    ["CADDY_AUTOFIX_SUCCESS"]="‚úÖ Caddy container and its volumes deleted. Retrying startup..."
    ["CADDY_AUTOFIX_FAILED"]="‚ùå Error: Failed to start Caddy even after cleanup. Check if ports 80 and 443 are busy."
    ["CONTAINER_START_TIMEOUT"]="‚ö†Ô∏è Container startup timeout (30 seconds) exceeded. Continuing..."
    ["NETWORK_NOT_FOUND"]="‚ö†Ô∏è 'remnanode-network' not found. Creating..."
    ["ERROR_CREATE_NETWORK"]="‚ùå Error: Failed to create Docker network."
    ["ERROR_CREATE_CADDYFILE"]="‚ùå Error: Failed to create Caddyfile."
    ["ERROR_CREATE_CADDY_COMPOSE"]="‚ùå Error: Failed to create docker-compose.yml."
    ["ERROR_COPY_FILE"]="‚ùå Error: Failed to copy file."
    ["FILE_NOT_FOUND_SKIP"]="‚ö†Ô∏è File not found at the specified path. Step skipped."
    ["ERROR_START_CADDY"]="‚ùå Error: Failed to start Caddy container."
    ["CHECK_PORT_BUSY"]="üí° Check if port 8443 is busy."
    ["IPTABLES_NOT_FOUND"]="‚ö†Ô∏è iptables not found. Installing..."
    ["ERROR_DOMAIN_RESOLVE_FAILED"]="‚ùå Error: Failed to resolve domain to IP address."
    ["MANUAL_IP_PROMPT"]="‚ö†Ô∏è Failed to get IP address. Please enter it manually."
    ["MANUAL_IP_INPUT"]="‚å®Ô∏è Enter IP manually: "
    ["ERROR_CADDYFILE_NOT_FOUND"]="‚ùå Error: Caddyfile not found at /opt/remnawave/caddy/Caddyfile."
    ["ERROR_ENV_NOT_FOUND"]="‚ùå Error: .env file not found at /opt/remnawave/.env."
    ["ERROR_UPDATE_CADDYFILE"]="‚ùå Error: Failed to update Caddyfile."
    ["ERROR_UPDATE_ENV"]="‚ùå Error: Failed to update .env file."
    ["ERROR_RESTART_CADDY"]="‚ùå Error: Failed to restart Caddy. Try manually."
    ["CONTAINER_NOT_FOUND_LOGS"]="‚ö†Ô∏è Container 'remnawave' not found. Cannot check logs."
    ["WARP_PROXY_INSTALL_FAILED"]="‚ùå Error: Failed to install WARP Native."
    ["WARP_INSTALL_UNSUPPORTED_OS"]="‚ùå This script only supports Ubuntu and Debian."
    ["WARP_INSTALL_FAILED_REPO"]="‚ùå Error: Failed to add Cloudflare repository. Exiting."
    ["WARP_INSTALL_FAILED_INSTALL"]="‚ùå Error: Failed to install cloudflare-warp. Exiting."
    ["WARP_INSTALL_REGISTER_FAILED"]="‚ùå Error: Failed to register with WARP."
    ["WARP_INSTALL_PROXY_FAILED"]="‚ùå Error: Failed to set proxy mode for WARP."
    ["WARP_INSTALL_CONNECT_FAILED"]="‚ùå Error: Failed to connect to WARP."
    ["WARP_INSTALL_FINAL_FAIL"]="‚ùå WARP failed to connect. Check manually."
    # === IPv6 and Iptables Settings ===
    ["IPV6_TOGGLE_HEADER"]="üõ°Ô∏è IPv6 Management"
    ["IPV6_STATUS"]="Current IPv6 status: "
    ["IPV6_DISABLED"]="DISABLED"
    ["IPV6_ENABLED"]="ENABLED"
    ["PROMPT_DISABLE_IPV6"]="Do you want to DISABLE IPv6? (y/n) "
    ["PROMPT_ENABLE_IPV6"]="Do you want to ENABLE IPv6? (y/n) "
    ["IPV6_DISABLED_SUCCESS"]="‚úÖ IPv6 successfully disabled."
    ["IPV6_ENABLED_SUCCESS"]="‚úÖ IPv6 successfully enabled."
    ["IPTABLES_SAVE_HEADER"]="üíæ Saving Iptables Rules"
    ["IPTABLES_SAVE_PROMPT"]="Enter the full path to the file to save (e.g., /etc/iptables/rules.v4): "
    ["IPTABLES_SAVE_SUCCESS"]="‚úÖ Iptables rules successfully saved to file:"
    # === Configuration Editing and Viewing ===
    ["EDIT_CONFIG_HEADER"]="üîß Editing .env file"
    ["CONF_FILE_PROMPT_EDIT"]="The .env file already exists. Do you want to edit it? (y/n) "
    ["VIEW_CONFIG_HEADER"]="üìã Current .env Config"
    ["PRESS_ENTER_TO_RETURN"]="Press Enter to return to the menu..."
)
       
# –§—É–Ω–∫—Ü–∏–∏ –ö–æ–Ω—Ñ–∏–≥–∞ .env
view_config() {
    local CONFIG_FILE=".env"
    
    clear
    echo -e "${ORANGE}$(get_text VIEW_CONFIG_HEADER)${NC}"
    echo "-------------------------------------------------"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}$(get_text CONFIG_FILE_NOT_FOUND_VIEW)${NC}"
    else
        while IFS= read -r line; do
            if [ ${#line} -gt 50 ]; then
                echo "${line:0:50}..."
            else
                echo "$line"
            fi
        done < "$CONFIG_FILE"
    fi
    
    echo "-------------------------------------------------"
    echo -e "${GREEN}$(get_text PRESS_ENTER_TO_RETURN)${NC}"
    read -n 1
    start
}
edit_config() {
    local CONFIG_FILE=".env"
    
    clear
    echo -e "${ORANGE}$(get_text EDIT_CONFIG_HEADER)${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "${RED}$(get_text CONF_FILE_NOT_FOUND_PROMPT_EDIT)${NC}"
        sleep 2
        start
        return
    fi
    
    if yn_prompt "$(get_text CONF_FILE_PROMPT_EDIT)"; then
        # === –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ===
        get_required_input "$(get_text ENTER_SSH_PORT)" SSH_PORT
        get_required_input "$(get_text ENTER_NEW_USER)" NEW_USER
        get_password "$(get_text ENTER_PASSWORD)" USER_PASS
        get_required_input "$(get_text ENTER_DOMAIN_CADDY)" DOMAIN
        echo "-------------------------------------------------"
        echo "$(get_text SSH_KEY_INFO)"
        get_required_input "$(get_text ENTER_SSH_KEY)" AUTHORIZED_KEY
        echo "-------------------------------------------------"
        get_required_input "$(get_text ENTER_SSL_KEY)" SSL_CERT_KEY
        SSL_CERT_KEY="${SSL_CERT_KEY#*SSL_CERT=}"
        echo "-------------------------------------------------"
        echo "$(get_text ENTER_PANEL_DOMAIN)"
        sleep 2
        get_required_input "$(get_text ENTER_DOMAIN_FOR_NODE_IP)" REMNAWAVE_DOMAIN
    
        IPTABLES_CONF=$(resolve_domain_to_ip "$REMNAWAVE_DOMAIN")
        
        if [[ -z "$IPTABLES_CONF" ]]; then
            echo "[!] $(get_text MANUAL_IP_PROMPT)"
            get_required_input "$(get_text MANUAL_IP_INPUT)" IPTABLES_CONF
        fi
    
        echo "$(get_text SAVE_SETTINGS_START)"
        sleep 2
        cat > "$CONFIG_FILE" <<EOF
SSH_PORT="$SSH_PORT"
NEW_USER="$NEW_USER"
USER_PASS="$USER_PASS"
DOMAIN="$DOMAIN"
AUTHORIZED_KEY="$AUTHORIZED_KEY"
SSL_CERT_KEY="$SSL_CERT_KEY"
IP_PANEL="$IPTABLES_CONF"
EOF
        echo -e "${GREEN}$(get_text SAVE_SETTINGS_SUCCESS)${NC}"
        sleep 2
    else
        echo -e "${RED}$(get_text OPERATION_CANCELLED)${NC}"
        sleep 1
    fi
    
    echo "$(get_text RETURNING)";
    sleep 1;
    start;
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
get_text() {
    local key=$1
    if [[ $LANG_CHOICE == "ru" ]]; then
        echo "${lang_ru[$key]}"
    else
        echo "${lang_en[$key]}"
    fi
}

yn_prompt() {
    local -a yn_options=("–î–∞" "–ù–µ—Ç")
    local selected_index=0
    
    while true; do
        clear
        echo -e "${ORANGE}$1${NC}" # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        echo ""
        
        for i in "${!yn_options[@]}"; do
            if [[ $i -eq $selected_index ]]; then
                echo -e "${GREEN}‚óè ${yn_options[$i]}${NC}"
            else
                echo -e "${ORANGE}‚óã ${yn_options[$i]}${NC}"
            fi
        done
        
        echo ""
        echo -e "${ORANGE}–ù–∞–≤–∏–≥–∞—Ü–∏—è: ‚Üë‚Üì, –í—ã–±–æ—Ä: Enter${NC}"
        
        read -sn1 -r key
        
        case "$key" in
            $'\x1b')
                read -sn1 -r -t 0.001 key
                read -sn1 -r -t 0.001 key
                case "$key" in
                    A)
                        ((selected_index = 0))
                        ;;
                    B)
                        ((selected_index = 1))
                        ;;
                esac
                ;;
            "")
                if [ "$selected_index" -eq 0 ]; then
                    return 0 # –î–∞ (Yes)
                else
                    return 1 # –ù–µ—Ç (No)
                fi
                ;;
        esac
    done
}
# =========================================================
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï API –§–£–ù–ö–¶–ò–ò ===
# =========================================================

make_api_request() {
    local method=$1
    local url=$2
    local token=$3
    local data=$4

    local headers=(
        -H "Authorization: Bearer $token"
        -H "Content-Type: application/json"
    )

    local response
    response=$(curl -X "$method" "$url" "${headers[@]}" -d "$data")

    echo "$response"
}

get_panel_token() {
    local ENV_FILE=".env"
    local TOKEN_VAR="REMNANAWAVE_API_TOKEN"
    local token=""

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ .env
    if [ -f "$ENV_FILE" ]; then
        token=$(grep "^$TOKEN_VAR=" "$ENV_FILE" | cut -d'=' -f2-)
        if [ -n "$token" ]; then
            echo -e "${GREEN}$(get_text USING_SAVED_TOKEN)${NC}"
            echo "$token"
            return 0
        fi
    fi

    # 2. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo -e "${YELLOW}$(get_text ENTER_PANEL_TOKEN)${NC}"
    read -p "Token: " user_token

    if [ -z "$user_token" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_MISSING_TOKEN)${NC}"
        return 1
    fi
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ .env
    echo -e "\n$TOKEN_VAR=$user_token" >> "$ENV_FILE"
    echo -e "${GREEN}$(get_text TOKEN_RECEIVED_AND_SAVED)${NC}"
    echo "$user_token"
}

get_config_profiles() {
    local domain_url="$1"
    local token="$2"

    local config_response=$(make_api_request "GET" "http://$domain_url/api/config-profiles" "$token")
    if [ -z "$config_response" ] || ! echo "$config_response" | jq -e '.response.configProfiles' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND): ${config_response}${NC}"
        return 1
    fi

    local profile_uuid=$(echo "$config_response" | jq -r '.response.configProfiles[] | select(.name == "Default-Profile") | .uuid' 2>/dev/null)
    if [ -z "$profile_uuid" ]; then
        echo -e "${YELLOW}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND)${NC}"
        return 1
    fi

    echo "$profile_uuid"
    return 0
}

get_inbound_from_panel() {
    local domain_url=$1
    local token=$2

    local inbounds_response=$(make_api_request "GET" "http://$domain_url/api/inbounds" "$token")
    if [ -z "$inbounds_response" ] || ! echo "$inbounds_response" | jq -e '.response.inbounds' > /dev/null 2>&1; then
        echo -e "${RED}‚ùå $(get_text ERROR_GET_INBOUNDS): $inbounds_response${NC}"
        return 1
    fi

    local inbounds=$(echo "$inbounds_response" | jq -r '.response.inbounds[] | "\(.uuid) \(.name)"')
    if [ -z "$inbounds" ]; then
        echo -e "${RED}‚ùå $(get_text NO_INBOUNDS_FOUND)${NC}"
        return 1
    fi

    local i=1
    declare -A inbound_map
    echo "$(get_text SELECT_INBOUND)"
    while IFS= read -r line; do
        local uuid=$(echo "$line" | awk '{print $1}')
        local name=$(echo "$line" | cut -d' ' -f2-)
        inbound_map["$i"]="$uuid"
        echo -e "${ORANGE}$i) ${WHITE}$name${NC}"
        ((i++))
    done <<< "$inbounds"

    echo ""
    read -p "$(get_text ENTER_YOUR_CHOICE): " choice
    local selected_uuid="${inbound_map[$choice]}"
    
    if [ -z "$selected_uuid" ]; then
        return 1
    fi

    echo "$selected_uuid"
}

create_node() {
    local domain_url=$1
    local token=$2
    local config_profile_uuid=$3
    local inbound_uuid=$4
    local node_address="${5:-$(curl -s -4 ifconfig.me || curl -s -4 api.ipify.org || curl -s -4 ipinfo.io/ip)}"
    local node_name="${6:-Node-$(date +%s)}"

    local node_data=$(cat <<EOF
{
    "name": "$node_name",
    "address": "$node_address",
    "port": 2222,
    "configProfile": {
        "activeConfigProfileUuid": "$config_profile_uuid",
        "activeInbounds": ["$inbound_uuid"]
    },
    "isTrafficTrackingActive": false,
    "trafficLimitBytes": 0,
    "notifyPercent": 0,
    "trafficResetDay": 31,
    "excludedInbounds": [],
    "countryCode": "XX",
    "consumptionMultiplier": 1.0
}
EOF
)

    local node_response=$(make_api_request "POST" "http://$domain_url/api/nodes" "$token" "$node_data")

    if [ -z "$node_response" ] || ! echo "$node_response" | jq -e '.response.uuid' > /dev/null 2>&1; then
        echo -e "${RED}$(get_text ERROR_CREATE_NODE): ${node_response}${NC}"
        return 1
    fi

    echo -e "${GREEN}$(get_text NODE_CREATED)${NC}\n"
    return 0
}


#
#
# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è 
#
#
cleanup_remnanode() {
    echo -e "${ORANGE}$(get_text CLEANUP_START)${NC}"
    sleep 2

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ remnanode –∏ caddy
    echo "$(get_text CLEANUP_CONTAINERS)"
    sudo docker stop remnanode &>/dev/null
    sudo docker rm remnanode &>/dev/null
    sudo docker stop caddy &>/dev/null
    sudo docker rm caddy &>/dev/null
    echo "$(get_text CLEANUP_CONTAINERS_SUCCESS)"
    sleep 1

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo "$(get_text CLEANUP_DIRS)"
    sudo rm -rf /opt/remnanode /opt/caddy
    sudo rm -rf /opt/remnawave
    echo "$(get_text CLEANUP_DIRS_SUCCESS)"
    sleep 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ Docker volumes –∏ —Å–µ—Ç–µ–π
    read -p "$(get_text CLEANUP_VOLUMES_PROMPT)" choice
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        sudo docker volume prune -f &>/dev/null
        echo "$(get_text CLEANUP_VOLUMES_SUCCESS)"
        sudo docker network prune -f &>/dev/null
        echo "$(get_text CLEANUP_NETWORKS_SUCCESS)"
    fi

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª iptables
    echo "$(get_text CLEANUP_IPTABLES)"
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    echo "$(get_text CLEANUP_IPTABLES_SUCCESS)"

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker-—Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ iptables
    echo "$(get_text CLEANUP_RESTART_DOCKER)"
    sudo systemctl restart docker
    echo "$(get_text CLEANUP_RESTART_SUCCESS)"
    sleep 1

    sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    sudo iptables -A OUTPUT -j ACCEPT

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è SSH –æ–±—Ä–∞—Ç–Ω–æ
    sudo iptables -A INPUT -p tcp --dport "$SSH_PORT" -j ACCEPT

    echo -e "${ORANGE}$(get_text CLEANUP_COMPLETE)${NC}"
    sleep 3
}
# ==================================


# === –§–£–ù–ö–¶–ò–ò –í–í–û–î–ê –î–ê–ù–ù–´–• ===
get_required_input() {
    local prompt_text="$1"
    local var_name="$2"
    
    while true; do
        read -p "$prompt_text" input_value
        if [[ -n "$input_value" ]]; then
            eval "$var_name=\"$input_value\""
            break
        else
            echo "$(get_text INPUT_REQUIRED)"
        fi
    done
}
get_password() {
    local prompt_text="$1"
    local var_name="$2"

    while true; do
        read -s -p "$prompt_text" input_value
        echo # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –≤–≤–æ–¥–∞

        if [[ -n "$input_value" ]]; then
            eval "$var_name=\"$input_value\""
            break
        else
            echo "$(get_text PASSWORD_REQUIRED)"
        fi
    done
}
# =========================================================

# === –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–û–ö ===
check_ssh_port() {
    local current_port=$(grep -E "^Port\s+" /etc/ssh/sshd_config | awk '{print $2}' | tail -n1)
    if [ "$current_port" = "$SSH_PORT" ]; then
        return 0 # —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    else
        return 1 # –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å
    fi
}

check_ssh_security() {
    local root_login=$(grep -E "^PermitRootLogin\s+" /etc/ssh/sshd_config | tail -n1 | awk '{print $2}')
    local password_auth=$(grep -E "^PasswordAuthentication\s+" /etc/ssh/sshd_config | tail -n1 | awk '{print $2}')
    
    if [ "$root_login" = "no" ] && [ "$password_auth" = "no" ]; then
        return 0 # —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    else
        return 1 # –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å
    fi
}

check_user_exists() {
    if id "$NEW_USER" &>/dev/null; then
        return 0 # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    else
        return 1 # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
    fi
}

check_ssh_key() {
    local key_file="/home/$NEW_USER/.ssh/authorized_keys"
    if [ -f "$key_file" ] && grep -q "$AUTHORIZED_KEY" "$key_file" 2>/dev/null; then
        return 0 # –∫–ª—é—á —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    else
        return 1 # –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    fi
}

check_docker_installed() {
    if command -v docker &>/dev/null; then
        return 0 # docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    else
        return 1 # docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    fi
}

check_caddy_installed() {
    if command -v caddy &>/dev/null; then
        return 0 # caddy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    else
        return 1 # caddy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    fi
}

check_caddy_config() {
    if [ -f "/etc/caddy/Caddyfile" ] && grep -q "$DOMAIN" "/etc/caddy/Caddyfile" 2>/dev/null; then
        return 0 # –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    else
        return 1 # –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    fi
}


# =========================================================

# === –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ======================================
about_script() {
    clear
    echo -e "${ORANGE}‚ÑπÔ∏è $(get_text ABOUT_HEADER)${NC}"
    echo "-------------------------------------------------"
    
    echo -e "$(get_text ABOUT_INFO)"
    
    echo "-------------------------------------------------"
    echo -e "${GREEN}$(get_text PRESS_ENTER_TO_RETURN)${NC}"
    read -n 1
    start
}
resolve_domain_to_ip() {
    local domain=$1
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'dig +short' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ IP-–∞–¥—Ä–µ—Å–∞
    local ip=$(dig +short "$domain" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    
    if [[ -z "$ip" ]]; then
        echo "$(get_text ERROR_DOMAIN_RESOLVE_FAILED)" >&2
        return 1
    else
        echo "$ip"
        return 0
    fi
}
install_required_repos() {
    clear
    echo -e "${ORANGE}‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤${NC}"
    echo "---"
    echo -e "–≠—Ç–æ—Ç —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –∏ –¥–æ–±–∞–≤–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ Docker, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.\n"

    if [ -f /etc/os-release ]; then
        . /etc/os-release
        case "$ID" in
            debian|ubuntu)
                echo -e "${GREEN}üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω Debian/Ubuntu. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...${NC}"
                apt update -y
                apt install -y software-properties-common ca-certificates curl gnupg
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
                install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                chmod a+r /etc/apt/keyrings/docker.gpg
                echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt update -y
                ;;
            centos|fedora|rhel)
                echo -e "${GREEN}üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω CentOS/Fedora/RHEL. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...${NC}"
                yum install -y yum-utils device-mapper-persistent-data lvm2
                yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                yum install -y docker-ce docker-ce-cli containerd.io
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $ID${NC}"
                sleep 2
                return 1
                ;;
        esac
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.${NC}"
        sleep 2
        return 1
    fi
    echo -e "\n${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    sleep 2
}
# =========================================================
# === –§—É–Ω–∫—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
toggle_ipv6() {
    clear
    echo -e "${ORANGE}$(get_text IPV6_TOGGLE_HEADER)${NC}"
    local ipv6_status=$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6 2>/dev/null || echo "1")
    local status_text=""
    
    if [ "$ipv6_status" == "0" ]; then
        status_text="$(get_text IPV6_ENABLED)"
        echo -e "$(get_text IPV6_STATUS) ${GREEN}${status_text}${NC}"
        if yn_prompt "$(get_text PROMPT_DISABLE_IPV6)"; then
            sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
            sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 >/dev/null 2>&1
            echo -e "${GREEN}$(get_text IPV6_DISABLED_SUCCESS)${NC}"
        else
            echo "$(get_text OPERATION_CANCELLED)"
        fi
    else
        status_text="$(get_text IPV6_DISABLED)"
        echo -e "$(get_text IPV6_STATUS) ${RED}${status_text}${NC}"
        if yn_prompt "$(get_text PROMPT_ENABLE_IPV6)"; then
            sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 >/dev/null 2>&1
            sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0 >/dev/null 2>&1
            echo -e "${GREEN}$(get_text IPV6_ENABLED_SUCCESS)${NC}"
        else
            echo "$(get_text OPERATION_CANCELLED)"
        fi
    fi
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

save_iptables_rules() {
    clear
    echo -e "${ORANGE}$(get_text IPTABLES_SAVE_HEADER)${NC}"
    echo ""
    local save_path
    read -p "$(get_text IPTABLES_SAVE_PROMPT)" save_path
    
    if [[ -z "$save_path" ]]; then
        echo -e "${RED}$(get_text INPUT_REQUIRED)${NC}"
        sleep 1
        return
    fi
    
    sudo iptables-save > "$save_path"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}$(get_text IPTABLES_SAVE_SUCCESS)${NC}"
        echo -e "${WHITE}${save_path}${NC}"
    else
        echo -e "${RED}$(get_text ERROR_IPTABLES_SAVE)${NC}"
    fi
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}
setup_ssh_and_user() {
    echo "$(get_text SSH_SETUP_START)"
    sleep 0.5
    echo "$(get_text CHECK_SSH_PORT)"
    sleep 0.5
    if ! check_ssh_port; then
        echo "$(get_text SSH_PORT_CONFIGURING)"
        sleep 0.5
        sed -i "s/^#Port.*/Port $SSH_PORT/" /etc/ssh/sshd_config
        sed -i "s/^Port .*/Port $SSH_PORT/" /etc/ssh/sshd_config
    else
        echo "$(get_text SSH_PORT_ALREADY_SET)"
        sleep 0.5
    fi

    echo "$(get_text CHECK_SSH_SECURITY)"
    sleep 0.5
    if ! check_ssh_security; then
        echo "$(get_text SSH_SECURITY_CONFIGURING)"
        sed -i "s/^#PermitRootLogin.*/PermitRootLogin no/" /etc/ssh/sshd_config
        sed -i "s/^PermitRootLogin.*/PermitRootLogin no/" /etc/ssh/sshd_config
        sed -i "s/^#PasswordAuthentication.*/PasswordAuthentication no/" /etc/ssh/sshd_config
        sed -i "s/^PasswordAuthentication.*/PasswordAuthentication no/" /etc/ssh/sshd_config
        sed -i "s/^#ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/" /etc/ssh/sshd_config
        sed -i "s/^ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/" /etc/ssh/sshd_config
        sed -i "s/^#UsePAM.*/UsePAM no/" /etc/ssh/sshd_config
        sed -i "s/^UsePAM.*/UsePAM no/" /etc/ssh/sshd_config
    else
        echo "$(get_text SSH_SECURITY_ALREADY_SET)"
        sleep 0.5
    fi

    echo "$(get_text CHECK_USER)"
    sleep 0.5
    if ! check_user_exists; then
        echo "$(get_text USER_CREATING)"
        adduser --disabled-password --gecos "" "$NEW_USER"
        echo "$NEW_USER:$USER_PASS" | chpasswd
        usermod -aG sudo "$NEW_USER"
    else
        echo "$(get_text USER_ALREADY_EXISTS)"
        sleep 0.5
    fi

    echo "$(get_text CHECK_SSH_KEY)"
    sleep 0.5
    if ! check_ssh_key; then
        echo "$(get_text SSH_KEY_CONFIGURING)"
        sleep 0.5
        USER_HOME="/home/$NEW_USER"
        mkdir -p "$USER_HOME/.ssh"
        echo "$AUTHORIZED_KEY" > "$USER_HOME/.ssh/authorized_keys"
        chown -R "$NEW_USER:$NEW_USER" "$USER_HOME/.ssh"
        chmod 700 "$USER_HOME/.ssh"
        chmod 600 "$USER_HOME/.ssh/authorized_keys"
    else
        echo "$(get_text SSH_KEY_ALREADY_SET)"
        sleep 0.5
    fi

    echo "$(get_text SYSTEM_UPDATE)"
    sleep 0.5
    apt update && apt -y upgrade

    echo "$(get_text SSH_RESTART)"
    sleep 1
    systemctl restart sshd

    echo "$(get_text SSH_SETUP_COMPLETE)"
    sleep 0.5
}
# =========================================================================
# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ WARP Native ===
# =========================================================================

get_valid_port() {
    local prompt="$1"
    local default_value="$2"
    local port_var=""

    while true; do
        read -p "$(get_text "$prompt")$(get_text 'DEFAULT_PROMPT' | sed "s/XXX/$default_value/")" port_var
        port_var="${port_var:-$default_value}"

        if [[ "$port_var" =~ ^[0-9]+$ ]] && (( port_var >= 1 && port_var <= 65535 )); then
            echo "$port_var"
            break
        else
            echo "$(get_text INVALID_PORT)"
            sleep 2
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WARP Native (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
install_warp_native() {
    echo "================================================"
    echo "          üöÄ –£–°–¢–ê–ù–û–í–ö–ê WARP          "
    echo "================================================"
    sleep 2

    # –Ø—Ä–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Ä—Ç–∞
    echo -e "\n${CYAN}üåê –í–´–ë–û–† –ü–û–†–¢–ê –î–õ–Ø WARP PROXY${NC}"
    echo -e "${YELLOW}‚Üì –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è WARP –ø—Ä–æ–∫—Å–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 40000)${NC}"
    echo -e "${GREEN}‚û§ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—ã –æ—Ç 10000 –¥–æ 65535${NC}"
    
    local selected_port=$(get_valid_port "ENTER_WARP_PORT" "40000")
    echo -e "${GREEN}‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Ä—Ç: $selected_port${NC}"
    sleep 2

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ root
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WARP${NC}"
        sleep 2
        return 1
    fi

    echo -e "\n${CYAN}üîç –ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´${NC}"
    sleep 2
    if [[ -f "/etc/os-release" ]]; then
        . /etc/os-release
        if [[ "$ID" != "ubuntu" && "$ID" != "debian" ]]; then
            echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Ubuntu –∏ Debian${NC}"
            sleep 2
            return 1
        fi
        echo -e "${GREEN}‚úÖ –û–°: $PRETTY_NAME${NC}"
    else
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°${NC}"
        sleep 2
        return 1
    fi
    sleep 2

    echo -e "\n${CYAN}üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô${NC}"
    sleep 2
    sudo apt-get update -y
    sudo apt-get install -y curl gnupg2 apt-transport-https lsb-release ca-certificates
    echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    sleep 2

    echo -e "\n${CYAN}‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø CLOUDFLARE${NC}"
    sleep 2
    if ! sudo curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --dearmor | sudo tee /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg >/dev/null; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å GPG –∫–ª—é—á${NC}"
        sleep 2
        return 1
    fi
    
    if ! echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list > /dev/null; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π${NC}"
        sleep 2
        return 1
    fi
    
    sudo apt-get update -y
    echo -e "${GREEN}‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Cloudflare –¥–æ–±–∞–≤–ª–µ–Ω${NC}"
    sleep 2

    echo -e "\n${CYAN}üì• –£–°–¢–ê–ù–û–í–ö–ê CLOUDFLARE WARP${NC}"
    sleep 2
    if ! sudo apt-get install -y cloudflare-warp; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WARP${NC}"
        sleep 2
        return 1
    fi
    echo -e "${GREEN}‚úÖ WARP —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    sleep 2

    echo -e "\n${CYAN}‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ê WARP${NC}"
    sleep 2
    
    echo -e "${YELLOW}üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ WARP...${NC}"
    if ! sudo warp-cli registration new; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è${NC}"
        sleep 2
        return 1
    fi
    echo -e "${GREEN}‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞${NC}"
    sleep 2
    
    echo -e "${YELLOW}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä—Ç–∞ $selected_port...${NC}"
    if ! sudo warp-cli proxy port "$selected_port"; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç${NC}"
        sleep 2
        return 1
    fi
    echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $selected_port —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    sleep 2

    echo -e "${YELLOW}üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∫—Å–∏...${NC}"
    if ! sudo warp-cli mode proxy; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏${NC}"
        sleep 2
        return 1
    fi
    echo -e "${GREEN}‚úÖ –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω${NC}"
    sleep 2

    echo -e "\n${CYAN}üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö WARP${NC}"
    sleep 2
    if ! sudo timeout 15 warp-cli connect; then
        echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è${NC}"
        sleep 2
        return 1
    fi
    echo -e "${GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ${NC}"
    sleep 3

    # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    clear
    echo "================================================"
    echo "           üéâ WARP –£–°–¢–ê–ù–û–í–õ–ï–ù –ò –ù–ê–°–¢–†–û–ï–ù üéâ"
    echo "================================================"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–µ
    local actual_port=$(sudo warp-cli settings list 2>/dev/null | grep -i "proxy.port" | awk '{print $2}')
    actual_port=${actual_port:-$selected_port}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    local warp_ip=$(curl --socks5 127.0.0.1:$actual_port -s -m 10 https://ifconfig.me)
    local country_info=$(curl --socks5 127.0.0.1:$actual_port -s -m 10 "https://ipapi.co/$warp_ip/country_name/")
    local city_info=$(curl --socks5 127.0.0.1:$actual_port -s -m 10 "https://ipapi.co/$warp_ip/city/")
    
    echo -e "\n${CYAN}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–ê–¢–£–°–ï${NC}"
    echo "------------------------------------------------"
    echo -e "${GREEN}‚Ä¢ –°—Ç–∞—Ç—É—Å: ${WHITE}–ü–æ–¥–∫–ª—é—á–µ–Ω–æ${NC}"
    echo -e "${GREEN}‚Ä¢ –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: ${WHITE}$actual_port${NC}"
    [[ -n "$warp_ip" ]] && echo -e "${GREEN}‚Ä¢ –í–Ω–µ—à–Ω–∏–π IP: ${WHITE}$warp_ip${NC}"
    if [[ -n "$country_info" && "$country_info" != "Undefined" ]]; then
        echo -e "${GREEN}‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${WHITE}$country_info${NC}"
        [[ -n "$city_info" ]] && echo -e "${GREEN}‚Ä¢ –ì–æ—Ä–æ–¥: ${WHITE}$city_info${NC}"
    else
        echo -e "${YELLOW}‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${WHITE}Cloudflare Global Network${NC}"
    fi
    echo "------------------------------------------------"
    
    echo -e "\n${CYAN}üìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø:${NC}"
    echo "------------------------------------------------"
    echo -e "${GREEN}‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ${WHITE}sudo warp-cli status${NC}"
    echo -e "${GREEN}‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å: ${WHITE}sudo warp-cli disconnect${NC}"
    echo -e "${GREEN}‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å: ${WHITE}sudo warp-cli connect${NC}"
    echo -e "${GREEN}‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${WHITE}sudo warp-cli settings list${NC}"
    echo -e "${GREEN}‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: ${WHITE}export ALL_PROXY=socks5://127.0.0.1:$actual_port${NC}"
    echo "------------------------------------------------"
    sleep 2

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
    echo -e "\n${YELLOW}‚è≥ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...${NC}"
    for i in {30..1}; do
        echo -ne "${YELLOW}‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${i} —Å–µ–∫...\033[0K\r${NC}"
        sleep 1
    done
    echo -e "\n"

    return 0
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_warp_status() {
    while true; do
        clear
        echo "================================================"
        echo -e "         ${CYAN}$(get_text WARP_STATUS_HEADER)${NC}"
        echo "================================================"

        local status_output=$(sudo warp-cli status 2>/dev/null)
        
        if echo "$status_output" | grep -qE "Connected|–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"; then
            echo -e "${GREEN}üéâ WARP –£–°–ü–ï–®–ù–û –ü–û–î–ö–õ–Æ–ß–ï–ù!${NC}"
            sleep 2
            
            local actual_port=$(sudo warp-cli settings list 2>/dev/null | grep "WarpProxy on port" | awk '{print $NF}')
            
            if [[ -z "$actual_port" ]]; then
                echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WARP.${NC}"
            else
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ifconfig.me –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP
                local warp_ip=$(curl --socks5 127.0.0.1:$actual_port -s -m 10 https://ifconfig.me)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ip-api.com –ø–æ HTTP, —Ç–∞–∫ –∫–∞–∫ HTTPS —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
                local geo_info=$(curl --socks5 127.0.0.1:$actual_port -s -m 10 http://ip-api.com/json/$warp_ip)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç
                if [[ -n "$geo_info" ]]; then
                    # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é grep –∏ awk
                    local country_info=$(echo "$geo_info" | grep -o '"country":"[^"]*"' | awk -F'"' '{print $4}')
                    local city_info=$(echo "$geo_info" | grep -o '"city":"[^"]*"' | awk -F'"' '{print $4}')
                fi

                echo -e "\n${CYAN}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–ê–¢–£–°–ï${NC}"
                echo "------------------------------------------------"
                echo -e "${GREEN}‚Ä¢ –°—Ç–∞—Ç—É—Å: ${WHITE}–ü–æ–¥–∫–ª—é—á–µ–Ω–æ${NC}"
                echo -e "${GREEN}‚Ä¢ –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏: ${WHITE}$actual_port${NC}"
                [[ -n "$warp_ip" ]] && echo -e "${GREEN}‚Ä¢ –í–Ω–µ—à–Ω–∏–π IP: ${WHITE}$warp_ip${NC}"
                
                if [[ -n "$country_info" && "$country_info" != "Undefined" ]]; then
                    echo -e "${GREEN}‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${WHITE}$country_info${NC}"
                    [[ -n "$city_info" ]] && echo -e "${GREEN}‚Ä¢ –ì–æ—Ä–æ–¥: ${WHITE}$city_info${NC}"
                else
                    echo -e "${YELLOW}‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${WHITE}Cloudflare Global Network${NC}"
                fi
                echo "------------------------------------------------"
            fi
        else
            echo -e "${RED}‚ùå WARP –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù${NC}"
            echo -e "${YELLOW}–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞:${NC}"
            echo "$status_output"
        fi
        
        echo -e "${YELLOW}–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –≤–≤–µ–¥–∏—Ç–µ 'exit'${NC}"
        echo -ne "${CYAN}‚û§ –í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${NC}"
        read choice
        if [[ "$choice" == "exit" ]]; then
            break
        fi
    done
}
uninstall_warp_native() {
    echo "$(get_text WARP_PROXY_UNINSTALL_START)"
    sleep 2
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WARP
    if sudo warp-cli status | grep -q "Connected"; then
        echo -e "${ORANGE}$(get_text WARP_PROXY_STOPPING)${NC}"
        sleep 2
        sudo warp-cli disconnect &>/dev/null || true
    fi

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Cloudflare WARP –∏ WireGuard
    echo -e "${ORANGE}$(get_text WARP_PROXY_REMOVING_PACKAGES)${NC}"
    sleep 2
    sudo apt-get purge -y cloudflare-warp &>/dev/null || true
    sudo apt-get purge -y wireguard &>/dev/null || true
    sudo apt-get autoremove -y &>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∫–ª—é—á–∞
    sudo rm -rf /etc/apt/sources.list.d/cloudflare-client.list &>/dev/null || true
    sudo rm -f /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg &>/dev/null || true

    echo -e "${GREEN}$(get_text WARP_PROXY_UNINSTALL_COMPLETE)${NC}"
    sleep 3
}

# === –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò (REMNAWAVE) ===

change_panel_domain() {
    clear
    echo "$(get_text CHANGE_DOMAIN_HEADER)"
    echo "--------------------------------------------------"

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    read -p "$(get_text CONFIRM_CHANGE_DOMAIN)" -n 1 -r CONFIRMATION
    echo ""
    if [[ ! $CONFIRMATION =~ ^[Yy]$ ]]; then
        echo -e "\n${YELLOW}‚ùå $(get_text OPERATION_CANCELLED)${NC}"
        return 0
    fi
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
    read -p "$(get_text ENTER_NEW_DOMAIN)" NEW_DOMAIN
    if [ -z "$NEW_DOMAIN" ]; then
        echo -e "\n${RED}‚ùå $(get_text INPUT_REQUIRED)${NC}"
        return 1
    fi
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    local caddyfile_path="/opt/remnawave/caddy/Caddyfile"
    local env_path="/opt/remnawave/.env"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Caddyfile –∏ .env
    if [ ! -f "$caddyfile_path" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_CADDYFILE_NOT_FOUND)${NC}"
        return 1
    fi
    if [ ! -f "$env_path" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_ENV_NOT_FOUND)${NC}"
        return 1
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ Caddyfile
    echo -e "\n‚öôÔ∏è $(get_text UPDATING_CADDYFILE)"
    sudo sed -i "1s/.*/$NEW_DOMAIN/" "$caddyfile_path"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_UPDATE_CADDYFILE)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_UPDATE_CADDYFILE)"

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ .env
    echo -e "\n‚öôÔ∏è $(get_text UPDATING_ENV)"
    sudo sed -i "s|^FRONT_END_DOMAIN=.*|FRONT_END_DOMAIN=$NEW_DOMAIN|" "$env_path"
    sudo sed -i "s|^SUB_PUBLIC_DOMAIN=.*|SUB_PUBLIC_DOMAIN=$NEW_DOMAIN/api/sub|" "$env_path"
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_UPDATE_ENV)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_UPDATE_ENV)"

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy
    echo -e "\nüîÑ $(get_text RESTARTING_CADDY)"
    sudo docker compose -f /opt/remnawave/docker-compose.yml restart caddy
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_RESTART_CADDY)${NC}"
        return 1
    fi
    echo -e "‚úÖ $(get_text SUCCESS_RESTART_CADDY)"

    echo -e "\nüéâ $(get_text CHANGE_DOMAIN_COMPLETE)"
    sleep 3
}
check_logs_and_suggest_fix() {
    echo "$(get_text CHECK_PANEL_LOGS_START)"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä remnawave, –ø—Ä–µ–∂–¥–µ —á–µ–º —á–∏—Ç–∞—Ç—å –ª–æ–≥–∏
    if ! sudo docker ps -a --format '{{.Names}}' | grep -q 'remnawave'; then
        echo "$(get_text CONTAINER_NOT_FOUND_LOGS)"
        return 1
    fi

    # –ò—â–µ–º –≤ –ª–æ–≥–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º `grep` –∏ —Ñ–ª–∞–≥ `-q` –¥–ª—è —Ç–∏—Ö–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.
    if sudo docker logs remnawave 2>&1 | grep -q "Error: P1000"; then
        echo "--------------------------------------------------------------------------------"
        echo "$(get_text LOG_ERROR_FOUND)"
        echo "$(get_text LOG_ERROR_DB_CONNECT)"
        echo "$(get_text LOG_ERROR_REASON)"
        echo "$(get_text LOG_ERROR_RECOMMENDATION)"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        read -p "$(get_text LOG_ERROR_PROMPT)" choice
        if [[ "$choice" =~ ^[yY]$ ]]; then
            cd /opt/remnawave
            echo "$(get_text CLEANING_VOLUMES)"
            sudo docker compose down --volumes
            sudo docker compose up -d --force-recreate
            echo "$(get_text VOLUMES_CLEANED_RESTART)"
        else
            echo "$(get_text CLEANUP_CANCELED)"
        fi
        
        echo "--------------------------------------------------------------------------------"
        return 1
    else
        echo "$(get_text NO_DB_AUTH_ERROR)"
        return 0
    fi
}
setup_remnawave() {
    echo "$(get_text PANEL_INSTALL_START)"
    sleep 2
    echo -e "${WHITE}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    install_docker
    if [ $? -ne 0 ]; then
        echo "$(get_text DOCKER_INSTALL_ERROR)"
        return 1
    fi
    sleep 2

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Docker, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ iptables
    sudo systemctl restart docker
    if [ $? -ne 0 ]; then
        echo "$(get_text DOCKER_RESTART_ERROR)"
        return 1
    fi
    echo "$(get_text DOCKER_RESTART_SUCCESS)"
    sleep 2

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
    echo "$(get_text CREATE_DIR_PANEL)"
    sudo mkdir -p /opt/remnawave
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_DIR_PANEL)"
        return 1
    fi
    cd /opt/remnawave
    echo "$(get_text SUCCESS_DIR_CREATED_PANEL)"
    sleep 0.5

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã docker-compose.yml –∏ .env
    echo "$(get_text DOWNLOAD_FILES_PANEL)"
    sudo curl -o docker-compose.yml https://raw.githubusercontent.com/remnawave/backend/main/docker-compose-prod.yml
    sudo curl -o .env https://raw.githubusercontent.com/remnawave/backend/main/.env.sample
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_DOWNLOAD_FILES_PANEL)"
        return 1
    fi
    echo "$(get_text SUCCESS_DOWNLOAD_FILES_PANEL)"
    sleep 0.5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
    if [ -f .env ]; then
        echo "$(get_text ENV_EXISTS_PANEL)"
        sleep 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º JWT_AUTH_SECRET, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "JWT_AUTH_SECRET=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^JWT_AUTH_SECRET=.*/JWT_AUTH_SECRET=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º JWT_API_TOKENS_SECRET, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "JWT_API_TOKENS_SECRET=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^JWT_API_TOKENS_SECRET=.*/JWT_API_TOKENS_SECRET=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º METRICS_PASS, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "METRICS_PASS=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^METRICS_PASS=.*/METRICS_PASS=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º WEBHOOK_SECRET_HEADER, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "WEBHOOK_SECRET_HEADER=change_me" .env; then
            echo "$(get_text GENERATE_KEYS_PANEL)"
            sudo sed -i "s/^WEBHOOK_SECRET_HEADER=.*/WEBHOOK_SECRET_HEADER=$(openssl rand -hex 64)/" .env
            echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º POSTGRES_PASSWORD, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 'change_me'
        if grep -q "POSTGRES_PASSWORD=change_me" .env; then
            echo "$(get_text GENERATE_DB_PASSWORD_PANEL)"
            pw=$(openssl rand -hex 24)
            sudo sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$pw/" .env
            sudo sed -i "s|^\(DATABASE_URL=\"postgresql://postgres:\)[^\@]*\(@.*\)|\1$pw\2|" .env
            echo "$(get_text SUCCESS_DB_PASSWORD_PANEL)"
        fi
    else
        # –ï—Å–ª–∏ .env —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏ –ø–∞—Ä–æ–ª–∏
        echo "$(get_text GENERATE_KEYS_PANEL)"
        sudo sed -i "s/^JWT_AUTH_SECRET=.*/JWT_AUTH_SECRET=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^JWT_API_TOKENS_SECRET=.*/JWT_API_TOKENS_SECRET=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^METRICS_PASS=.*/METRICS_PASS=$(openssl rand -hex 64)/" .env
        sudo sed -i "s/^WEBHOOK_SECRET_HEADER=.*/WEBHOOK_SECRET_HEADER=$(openssl rand -hex 64)/" .env
        echo "$(get_text SUCCESS_KEYS_GENERATED_PANEL)"
        sleep 0.5
        
        echo "$(get_text GENERATE_DB_PASSWORD_PANEL)"
        pw=$(openssl rand -hex 24)
        sudo sed -i "s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$pw/" .env
        sudo sed -i "s|^\(DATABASE_URL=\"postgresql://postgres:\)[^\@]*\(@.*\)|\1$pw\2|" .env
        echo "$(get_text SUCCESS_DB_PASSWORD_PANEL)"
        sleep 0.5
    fi

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ .env Remnawave
    echo "$(get_text SET_DOMAIN_PANEL)"
    sudo sed -i "s/^FRONT_END_DOMAIN=.*/FRONT_END_DOMAIN=$DOMAIN/" .env
    sudo sed -i "s|^SUB_PUBLIC_DOMAIN=.*|SUB_PUBLIC_DOMAIN=$DOMAIN/api/sub|" .env
    echo "$(get_text SUCCESS_DOMAIN_SET_PANEL)"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Remnawave
    echo "$(get_text RUN_CONTAINERS_PANEL)"
    sudo docker compose up -d
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_RUN_CONTAINERS_PANEL)"
        check_logs_and_suggest_fix
        return 1
    fi
    echo "$(get_text SUCCESS_CONTAINERS_RUN_PANEL)"
    sleep 5

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Caddy
    install_caddy_docker
    if [ $? -ne 0 ]; then
        echo "$(get_text CADDY_INSTALL_ERROR_PANEL)"
        return 1
    fi
    sleep 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
    check_panel_status
    if [ $? -ne 0 ]; then
        echo "$(get_text PANEL_UNREACHABLE_DNS_FW)"
        return 1
    fi

    echo "$(get_text PANEL_INSTALL_COMPLETE)"
    sleep 7
}

install_caddy_docker() {
    echo "$(get_text CADDY_INSTALL_START)"

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Caddy
    echo "$(get_text CREATE_CADDY_DIRS)"
    sudo mkdir -p /opt/remnawave/caddy
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDY_DIR)"
        return 1
    fi

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Caddy
    cd /opt/remnawave/caddy
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CADDY_CD)"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Caddyfile, –µ—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if [ -d Caddyfile ]; then
        echo "$(get_text CADDYFILE_IS_DIR)"
        sudo rm -rf Caddyfile
    fi

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Caddyfile
    echo "$(get_text CREATE_CADDYFILE)"
    sleep 1
    sudo cat > Caddyfile <<EOF
https://$DOMAIN {
    reverse_proxy * http://remnawave:3000
}
:443 {
    tls internal
    respond 204
}
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDYFILE)"
        return 1
    fi

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª docker-compose.yml –¥–ª—è Caddy
    echo "$(get_text CREATE_CADDY_COMPOSE)"
    sleep 1
    sudo cat > docker-compose.yml <<EOF
services:
    caddy:
        image: caddy:2.9
        container_name: 'caddy'
        hostname: caddy
        restart: always
        ports:
            - '0.0.0.0:443:443'
            - '0.0.0.0:80:80'
        networks:
            - remnawave-network
        volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy-ssl-data:/data

networks:
    remnawave-network:
        name: remnawave-network
        driver: bridge
        external: true

volumes:
    caddy-ssl-data:
        driver: local
        external: false
        name: caddy-ssl-data
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDY_COMPOSE)"
        sleep 1
        return 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Caddy
    echo "$(get_text START_CADDY_CONTAINER)"
    sudo docker compose up -d

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_START_CADDY)"
        echo "$(get_text CADDY_AUTOFIX_START)"
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Ç–æ–º–æ–≤
        sudo docker compose down --volumes
        sleep 2
        echo "$(get_text CADDY_AUTOFIX_SUCCESS)"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ Caddy –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        sudo docker compose up -d
        if [ $? -eq 0 ]; then
            echo "$(get_text CADDY_ALREADY_RUNNING)"
        else
            echo "$(get_text CADDY_AUTOFIX_FAILED)"
            return 1
        fi
    fi

    echo "$(get_text CADDY_INSTALL_COMPLETE)"
    # === –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê ===
    start_time=$(date +%s)
    found_log=false
    # –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
    echo -e "\033[?25l"
    # –ê–Ω–∏–º–∞—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    spinner_chars=("." ".." "..." "")
    spinner_index=0
    
    while [ $(( $(date +%s) - start_time )) -lt 30 ]; do
        if sudo docker logs remnawave 2>&1 | grep -q "Remnawave Backend"; then
            echo -e "\r${GREEN}$(get_text CONTAINER_START_SUCCESS)      "
            found_log=true
            break
        fi
        
        # –í—ã–≤–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏
        echo -ne "\r$(get_text WAITING_FOR_CONTAINER_START)${spinner_chars[spinner_index]}   "
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        spinner_index=$(( (spinner_index + 1) % 4 ))
        
        sleep 1
    done

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
    echo -ne "\r${NC}"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
    echo -e "\033[?25h"

    if [ "$found_log" = false ]; then
        echo "$(get_text CONTAINER_START_TIMEOUT)"
    fi
    # === –ö–û–ù–ï–¶ –û–ñ–ò–î–ê–ù–ò–Ø ===
    sleep 3
}

check_panel_status() {
    clear
    local url="https://$DOMAIN"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ jq, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if ! command -v jq &> /dev/null; then
        echo "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        sudo apt-get update && sudo apt-get install jq -y
    fi

    clear
    echo "=================================================="
    echo -e " ¬† ¬† ¬† ¬† ${CYAN}$(get_text PANEL_STATUS_HEADER)${NC}"
    echo "=================================================="
    sleep 1

    # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
    local ip_address=$(dig +short "$DOMAIN" | head -n 1)
    if [ -z "$ip_address" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_DOMAIN_RESOLVE_FAILED)${NC}"
        return 1
    fi

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP
    local geo_info=$(curl -s "https://ipinfo.io/$ip_address/json" 2>/dev/null)
    local country_name=$(echo "$geo_info" | jq -r '.country' 2>/dev/null)
    local city_name=$(echo "$geo_info" | jq -r '.city' 2>/dev/null)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP-—Å—Ç–∞—Ç—É—Å–∞
    local http_code=$(curl -sS -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 15 --retry 3 --retry-delay 5 "$url")

    echo -e "\n${CYAN}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–ê–¢–£–°–ï –ü–ê–ù–ï–õ–ò:${NC}"
    echo "--------------------------------------------------"
    echo -e "${GREEN}‚Ä¢ –î–æ–º–µ–Ω: ${WHITE}$DOMAIN${NC}"
    echo -e "${GREEN}‚Ä¢ IP-–∞–¥—Ä–µ—Å: ${WHITE}$ip_address${NC}"
    [[ "$country_name" != "null" ]] && echo -e "${GREEN}‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${WHITE}$country_name${NC}"
    [[ "$city_name" != "null" ]] && echo -e "${GREEN}‚Ä¢ –ì–æ—Ä–æ–¥: ${WHITE}$city_name${NC}"
    echo -e "${GREEN}‚Ä¢ HTTP-–∫–æ–¥: ${WHITE}$http_code${NC}"

    echo -e "${GREEN}‚Ä¢ URL: ${CYAN}\e]8;;${url}\a${url}\e]8;;\a${NC}"

    if [[ "$http_code" == "200" || "$http_code" == "301" || "$http_code" == "302" ]]; then
        echo -e "\n${GREEN}$(get_text PANEL_SUCCESS_STATUS)${NC}"
    elif [[ "$http_code" == "000" ]]; then
        echo -e "\n${RED}$(get_text PANEL_UNREACHABLE_DNS_FW)${NC}"
    else
        echo -e "\n${RED}$(get_text PANEL_UNREACHABLE_CADDY)${NC}"
    fi

    echo "--------------------------------------------------"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...${NC}"
    read -r
}



# =========================================================

# === –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò (REMNANODE) ===
add_remnawave_node_auto() {
    clear
    echo "=================================================="
    echo -e " ¬† ¬† ${CYAN}$(get_text ADD_NODE_AUTO_HEADER)${NC}"
    echo "=================================================="

    local api_domain_url="localhost:3000"

    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏
    echo -e "\n‚öôÔ∏è $(get_text GETTING_TOKEN)"
    local panel_token=$(get_panel_token)
    if [ -z "$panel_token" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_MISSING_TOKEN)${NC}"
        sleep 3
        return 1
    fi
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ UUID –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    echo -e "\n‚öôÔ∏è $(get_text GETTING_CONFIG_PROFILE_UUID)"
    local config_profile_uuid=$(get_config_profiles "$api_domain_url" "$panel_token")
    if [ -z "$config_profile_uuid" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_CONFIG_PROFILE_NOT_FOUND)${NC}"
        sleep 3
        return 1
    fi

    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ UUID –∏–Ω–±–∞—É–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é API
    echo -e "\n‚öôÔ∏è $(get_text SELECT_INBOUND)"
    local inbound_uuid=$(get_inbound_from_panel "$api_domain_url" "$panel_token")
    if [ -z "$inbound_uuid" ]; then
        echo -e "${RED}‚ùå $(get_text ERROR_NO_INBOUND_SELECTED)${NC}"
        sleep 3
        return 1
    fi

    # 4. –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo -e "\n${CYAN}$(get_text ENTER_NODE_DETAILS)${NC}"
    read -p "$(get_text ENTER_NODE_DOMAIN): " node_domain
    if [ -z "$node_domain" ]; then
        echo -e "${RED}‚ùå $(get_text INPUT_REQUIRED)${NC}"
        sleep 2
        return 1
    fi

    read -p "$(get_text ENTER_NODE_NAME) (Default: $node_domain): " node_name
    if [ -z "$node_name" ]; then
        node_name="$node_domain"
    fi
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–¥—ã
    echo ""
    echo -e "‚öôÔ∏è $(get_text ADDING_NODE_TO_PANEL)"
    echo "--------------------------------------------------"
    create_node "$api_domain_url" "$panel_token" "$config_profile_uuid" "$inbound_uuid" "$node_domain" "$node_name"
    sleep 5
}

install_docker() {
    echo "$(get_text DOCKER_INSTALLING)"
    sleep 0.5
    echo "$(get_text CHECK_DOCKER)"
    sleep 0.5
    if ! check_docker_installed; then
        echo "$(get_text DOCKER_INSTALLING)"
        sleep 0.5
        curl -fsSL https://get.docker.com | sh
        sleep 4
    else
        echo "$(get_text DOCKER_ALREADY_INSTALLED)"
        sleep 0.5
    fi

    echo "$(get_text DOCKER_INSTALL_COMPLETE)"
    sleep 3
}

setup_remnanode() {
    echo "$(get_text SETUP_REMNANODE)"
    echo "$(get_text CREATE_REMNANODE_DIR)"
    sudo mkdir -p /opt/remnanode
    cd /opt/remnanode
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_DIR_REMNANODE)"
        return 1
    fi
    
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .env —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    echo "$(get_text CREATE_ENV_FILE)"
    sudo cat > .env <<EOF
APP_PORT=2222
SSL_CERT=$SSL_CERT_KEY
EOF
    echo "$(get_text SUCCESS_ENV_FILE)"
    
    # –°–æ–∑–¥–∞–µ–º docker-compose.yml —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    echo "$(get_text CHECK_DOCKER_COMPOSE)"
    if [ ! -f docker-compose.yml ]; then
        sudo cat > docker-compose.yml <<EOF
services:
    remnanode:
        container_name: remnanode
        hostname: remnanode
        image: remnawave/node:latest
        restart: always
        network_mode: host
        env_file:
            - .env
networks:
  remnanode-network:
    name: remnanode-network
    driver: bridge
    external: true
EOF
        echo "$(get_text CREATE_DOCKER_COMPOSE)"
    else
        echo "$(get_text DOCKER_COMPOSE_EXISTS)"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    echo "$(get_text START_REMNANODE_CONTAINER)"
    sudo docker compose up -d
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_START_REMNANODE)"
        return 1
    fi

    echo "$(get_text REMNANODE_SETUP_COMPLETE)"
}

install_caddy_docker_remnanode() {
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    container_exists() {
        sudo docker ps -a --format '{{.Names}}' | grep -q "^caddy$"
    }

    echo "$(get_text CADDY_INSTALL_START)"
    sleep 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
    if ! command -v docker &> /dev/null || ! command -v docker compose &> /dev/null; then
        echo "$(get_text DOCKER_COMPOSE_NOT_INSTALLED)"
        sleep 1
        echo "$(get_text DOCKER_COMPOSE_NOT_INSTALLED_HINT)"
        sleep 1
        return 1
    fi

    # === –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Caddy ===
    if container_exists; then
        echo "$(get_text CADDY_CONTAINER_EXISTS)"
        read -p "$(get_text CADDY_CONTAINER_DELETE_PROMPT)" REPLY
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo ""
            echo "$(get_text CADDY_CONTAINER_DELETING)"
            sleep 1
            sudo docker rm -f caddy
            echo "$(get_text CADDY_CONTAINER_DELETED)"
            sleep 1
        else
            echo ""
            echo "$(get_text CADDY_CONTAINER_KEEP)"
            sleep 1
            return 1 # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
        fi
    fi

    # === –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è Caddy ===
    CADDY_DIR="/opt/remnanode/caddy"
    echo "$(get_text CREATE_CADDY_DIRS)"
    sleep 1
    sudo mkdir -p "$CADDY_DIR"
    sudo mkdir -p "$CADDY_DIR/www"
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    sudo chown -R $USER:$USER "$CADDY_DIR"
    echo "$(get_text SUCCESS_CREATE_DIRS)"
    sleep 1

    # === –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Caddyfile ===
    echo "$(get_text CREATE_CADDYFILE)"
    sleep 1
    cat <<EOF | sudo tee "$CADDY_DIR/Caddyfile" > /dev/null
$DOMAIN:8443 {
    reverse_proxy remnanode:2222
    root * /var/www/html
    file_server {
        index index.html
    }
}
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDYFILE)"
        sleep 1
        return 1
    fi
    echo "$(get_text SUCCESS_CADDYFILE)"
    sleep 1

    # === –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml ===
    echo "$(get_text CREATE_CADDY_COMPOSE)"
    sleep 1
    cat <<EOF | sudo tee "$CADDY_DIR/docker-compose.yml" > /dev/null
services:
  caddy:
    image: caddy:2.9
    container_name: caddy
    hostname: caddy
    restart: always
    ports:
      - '0.0.0.0:8443:8443'
    networks:
      - remnanode-network
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-ssl-data:/data
      - ./www:/var/www/html

networks:
  remnanode-network:
    name: remnanode-network
    driver: bridge
volumes:
  caddy-ssl-data:
    name: caddy-ssl-data
    driver: local
EOF
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_CREATE_CADDY_COMPOSE)"
        sleep 1
        return 1
    fi
    echo "$(get_text SUCCESS_CADDY_COMPOSE)"
    sleep 1

    # === –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
    echo ""
    echo "=============================================="
    echo "$(get_text WEBPAGE_SETUP_HEADER)"
    echo "$(get_text WEBPAGE_SETUP_INFO1)"
    echo "$(get_text WEBPAGE_SETUP_INFO2)"
    echo "$(get_text WEBPAGE_SETUP_INFO3)"
    read -p "$(get_text ENTER_WEBPAGE_PATH)" WEB_FILE_PATH
    
    if [ "$WEB_FILE_PATH" != "0" ]; then
        if [ -f "$WEB_FILE_PATH" ]; then
            echo "$(get_text COPYING_FILE)"
            sleep 1
            sudo cp "$WEB_FILE_PATH" "$CADDY_DIR/www/index.html"
            if [ $? -ne 0 ]; then
                echo "$(get_text ERROR_COPY_FILE)"
                sleep 1
                return 1
            fi
            echo "$(get_text SUCCESS_COPY_FILE)"
            sleep 1
        else
            echo "$(get_text FILE_NOT_FOUND_SKIP)"
            sleep 1
        fi
    else
        echo "$(get_text WEBPAGE_SKIP)"
        sleep 1
    fi

    # === –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Caddy ===
    echo "$(get_text START_CADDY_CONTAINER)"
    sleep 1
    cd "$CADDY_DIR" || { echo "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $CADDY_DIR"; return 1; }
    sudo docker compose up -d
    if [ $? -ne 0 ]; then
        echo "$(get_text ERROR_START_CADDY)"
        sleep 1
        echo "$(get_text CHECK_PORT_BUSY)"
        sleep 1
        return 1
    fi
    echo "$(get_text CADDY_CONTAINER_STARTED)"
    sleep 3
    clear
    
    echo "$(get_text CADDY_INSTALL_COMPLETE)"
    sleep 4
    # === –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Remnanode –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ ===
    echo ""
    echo "=============================================="
    echo "$(get_text CHECK_REMNANODE_LOGS_HEADER)"
    sleep 1
    if sudo docker logs remnanode 2>&1 | grep -q "spawn xray error"; then
        echo "$(get_text ERROR_LOGS_FOUND)"
        sleep 1
        echo "$(get_text ERROR_LOGS_REASONS)"
        sleep 1
        echo "$(get_text ERROR_LOGS_HINT)"
        sleep 1
    else
        echo "$(get_text LOGS_CLEAN)"
        sleep 2
    fi
}


setup_firewall() {
    echo "$(get_text FIREWALL_SETUP_START)"
    sleep 0.5

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ iptables
    if ! command -v iptables &> /dev/null; then
        echo "$(get_text IPTABLES_NOT_FOUND)"
        sleep 3
        apt-get update
        apt-get install -y iptables
        echo "$(get_text IPTABLES_INSTALL_SUCCESS)"
        sleep 2
    else
        echo "$(get_text IPTABLES_ALREADY_INSTALLED)"
        sleep 1
    fi

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iptables
    echo "$(get_text APPLYING_IPTABLES)"
    sleep 4
    iptables -F
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -P OUTPUT ACCEPT

    iptables -A INPUT -i lo -j ACCEPT
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
    iptables -A INPUT -p tcp --dport $SSH_PORT -j ACCEPT
    iptables -A INPUT -p tcp --dport 443 -j ACCEPT
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp -s $IP_PANEL --dport 2222 -j ACCEPT
    
    echo "$(get_text IPTABLES_SUCCESS)"
    sleep 0.5
    echo "$(get_text FIREWALL_SETUP_COMPLETE)"
    sleep 0.5
}
select_vpn_method() {
    clear
    echo "================================================="
    echo -e "         ${CYAN}–í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò –ú–ê–°–ö–ò–†–û–í–ö–ò${NC}"
    echo "================================================="
    echo -e "1) üëª Reality: ${WHITE}–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —á—É–∂–∏–µ —Å–∞–π—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)${NC}"
    echo -e "2) üïµÔ∏è Reality+ Selfsteal: ${WHITE}–∫—Ä–∞–∂–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞${NC}"
    echo "================================================="
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1 –∏–ª–∏ 2): " VPN_CHOICE

    if [[ "$VPN_CHOICE" == "2" ]]; then
        install_caddy_docker_remnanode
    else
        echo -e "–í—ã –≤—ã–±—Ä–∞–ª–∏ ${ORANGE}Reality${NC} (–º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —á—É–∂–∏–µ —Å–∞–π—Ç—ã). –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Caddy –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–∞."
        sleep 2
    fi
}

run_full_install() {
    install_docker
    setup_remnanode
    select_vpn_method
    setup_firewall
    echo "$(get_text FULL_INSTALL_COMPLETE)"
}
# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
run_backup_logic() {
    local backup_type="$1"
    local TELEGRAM_TOKEN=""
    local CHAT_ID=""
    local setup_cron="false"

    local SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
    local TELEGRAM_ENV_FILE="$SCRIPT_DIR/.env"
    local DB_ENV_FILE="/opt/remnawave/.env"

    if [ -f "$TELEGRAM_ENV_FILE" ]; then
        TELEGRAM_TOKEN=$(grep -E '^TELEGRAM_TOKEN=' "$TELEGRAM_ENV_FILE" | cut -d'=' -f2-)
        CHAT_ID=$(grep -E '^CHAT_ID=' "$TELEGRAM_ENV_FILE" | cut -d'=' -f2-)
    fi

    if yn_prompt "$(get_text "PROMPT_SCHEDULE_BACKUP")"; then
        setup_cron="true"
        echo ""

        if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$CHAT_ID" ]; then
            if yn_prompt "$(get_text "PROMPT_FOUND_CONFIG")"; then
                echo "$(get_text "PROMPT_USING_SAVED_CONFIG")"
            else
                TELEGRAM_TOKEN=""
                CHAT_ID=""
            fi
        fi

        if [ -z "$TELEGRAM_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            if yn_prompt "$(get_text "PROMPT_SETUP_TELEGRAM")"; then
                echo "$(get_text "TELEGRAM_INFO_1")"
                echo "$(get_text "TELEGRAM_INFO_2")"
                echo "$(get_text "TELEGRAM_INFO_3")"
                echo ""
                read -p "$(get_text "PROMPT_TELEGRAM_TOKEN")" TELEGRAM_TOKEN
                read -p "$(get_text "PROMPT_CHAT_ID")" CHAT_ID

                if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$CHAT_ID" ]; then
                    echo "$(get_text "SAVING_NEW_SETTINGS")"
                    sudo tee -a "$TELEGRAM_ENV_FILE" > /dev/null <<< "TELEGRAM_TOKEN=\"$TELEGRAM_TOKEN\"
CHAT_ID=\"$CHAT_ID\""
                    echo "$(get_text "CONFIG_SAVED_SUCCESS")$TELEGRAM_ENV_FILE."
                fi
            fi
        fi
    fi

    echo "$(get_text "SEARCHING_DB_CONFIG")"
    local DB_USER="remnawave"
    local DB_PASS=""
    local DB_HOST="remnawave-db"
    local DB_NAME="remnawave"

    if [ -f "$DB_ENV_FILE" ]; then
        echo "$(get_text "DB_CONFIG_FOUND")"
        local DB_URL=$(grep 'DATABASE_URL' "$DB_ENV_FILE" | cut -d'=' -f2- | sed 's/"//g')
        if [[ -n "$DB_URL" ]]; then
            DB_USER=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/([^:]+):.*@.*/\1/')
            DB_PASS=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/[^:]+:([^@]+)@.*/\1/')
            DB_HOST=$(echo "$DB_URL" | sed -E 's/postgresql:\/\/[^@]+@([^:]+):.*/\1/')
            DB_NAME=$(echo "$DB_URL" | sed -E 's/.*\/([^?]+).*/\1/')
            echo "$(get_text "DB_INFO_EXTRACTED")"
            sleep 2
        else
            echo "$(get_text "DB_URL_NOT_FOUND")"
        fi
    else
        echo "$(get_text "DB_ENV_NOT_FOUND")"
    fi

    if ! command -v docker &> /dev/null; then
        echo "$(get_text "DOCKER_NOT_RUNNING")"
        echo "$(get_text "DOCKER_INSTALL_PROMPT")"
        exit 1
    fi

    local BACKUP_SCRIPT_PATH="/usr/local/bin/remnawave_backup.sh"

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏
    local text_backup_files_note="$(get_text "BACKUP_FILES_NOTE")"
    local text_telegram_caption="$(get_text "TELEGRAM_CAPTION")"
    local text_cleaning_progress="$(get_text "CLEANING_PROGRESS")"
    local text_backups_over_limit="$(get_text "BACKUPS_OVER_LIMIT")"
    local text_no_cleanup_needed="$(get_text "NO_CLEANUP_NEEDED")"
    local text_backup_start="$(get_text "BACKUP_START")"
    local text_creating_temp_dir="$(get_text "CREATING_TEMP_DIR")"
    local text_creating_db_dump="$(get_text "CREATING_DB_DUMP")"
    local text_db_dump_error="$(get_text "DB_DUMP_ERROR")"
    local text_db_dump_success="$(get_text "DB_DUMP_SUCCESS")"
    local text_copying_remnawave_dir="$(get_text "COPYING_REMAWAVE_DIR")"
    local text_copying_all_opt="$(get_text "COPYING_ALL_OPT")"
    local text_db_only_backup_selected="$(get_text "DB_ONLY_BACKUP_SELECTED")"
    local text_creating_single_archive="$(get_text "CREATING_SINGLE_ARCHIVE")"
    local text_archive_error="$(get_text "ARCHIVE_ERROR")"
    local text_archive_success="$(get_text "ARCHIVE_SUCCESS")"
    local text_deleting_temp_dir="$(get_text "DELETING_TEMP_DIR")"

    sudo rm -f "$BACKUP_SCRIPT_PATH"
    sudo touch "$BACKUP_SCRIPT_PATH"

    sudo bash -c "
        printf '#!/bin/bash\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# %s\n' \"$text_backup_files_note\" >> '$BACKUP_SCRIPT_PATH'
        printf 'BACKUP_DIR=\"/opt/backups\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'MAX_BACKUPS=50\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'TELEGRAM_TOKEN=\"%s\"\n' \"$TELEGRAM_TOKEN\" >> '$BACKUP_SCRIPT_PATH'
        printf 'CHAT_ID=\"%s\"\n' \"$CHAT_ID\" >> '$BACKUP_SCRIPT_PATH'
        printf 'DB_USER=\"%s\"\n' \"$DB_USER\" >> '$BACKUP_SCRIPT_PATH'
        printf 'DB_PASS=\"%s\"\n' \"$DB_PASS\" >> '$BACKUP_SCRIPT_PATH'
        printf 'DB_HOST=\"%s\"\n' \"$DB_HOST\" >> '$BACKUP_SCRIPT_PATH'
        printf 'DB_NAME=\"%s\"\n' \"$DB_NAME\" >> '$BACKUP_SCRIPT_PATH'
        printf 'BACKUP_TYPE=\"%s\"\n\n' \"$backup_type\" >> '$BACKUP_SCRIPT_PATH'
        printf 'send_telegram_file() {\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    local file_path=\"\$1\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    local caption=\"%s\$(basename \"\$file_path\")\"\n' \"$text_telegram_caption\" >> '$BACKUP_SCRIPT_PATH'
        printf '    if [ -n \"\$TELEGRAM_TOKEN\" ] && [ -n \"\$CHAT_ID\" ]; then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        echo \"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram...\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        curl -s -X POST \"https://api.telegram.org/bot\$TELEGRAM_TOKEN/sendDocument\" \\\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            -F document=@\"\$file_path\" \\\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            -F chat_id=\"\$CHAT_ID\" \\\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            -F caption=\"\$caption\" > /dev/null\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf '}\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'send_telegram_message() {\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    local message=\"\$1\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    if [ -n \"\$TELEGRAM_TOKEN\" ] && [ -n \"\$CHAT_ID\" ]; then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        curl -s -X POST \"https://api.telegram.org/bot\$TELEGRAM_TOKEN/sendMessage\" \\\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            -d chat_id=\"\$CHAT_ID\" \\\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            --data-urlencode \"text=\$message\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf '}\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'clean_old_backups() {\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    echo \"%s\"\n' \"$text_cleaning_progress\" >> '$BACKUP_SCRIPT_PATH'
        printf '    mkdir -p \"\$BACKUP_DIR\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    local backup_count=\$(ls -1 \"\$BACKUP_DIR\" 2>/dev/null | wc -l)\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    if (( backup_count > MAX_BACKUPS )); then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        local backups_to_remove=\$(( backup_count - MAX_BACKUPS ))\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        printf \"%s\" \"$text_backups_over_limit\" \"\$MAX_BACKUPS\" \"\$backups_to_remove\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        ls -1t \"\$BACKUP_DIR\" | tail -n \"\$backups_to_remove\" | xargs -I {} rm -- \"\$BACKUP_DIR/{}\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    else\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        echo \"%s\"\n' \"$text_no_cleanup_needed\" >> '$BACKUP_SCRIPT_PATH'
        printf '    fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf '}\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_backup_start\" >> '$BACKUP_SCRIPT_PATH'
        printf 'mkdir -p \"\$BACKUP_DIR\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'TIMESTAMP=\$(date +\"%%Y-%%m-%%d_%%H-%%M-%%S\")\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'FINAL_ARCHIVE_FILE=\"\$BACKUP_DIR/remnawave_backup_\$TIMESTAMP.tar.gz\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'TEMP_DIR=\"/tmp/remnawave_backup_\$TIMESTAMP\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'DB_BACKUP_FILE=\"\$TEMP_DIR/remnawave_db.sql\"\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_creating_temp_dir\" >> '$BACKUP_SCRIPT_PATH'
        printf 'mkdir -p \"\$TEMP_DIR\"\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 1. –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_creating_db_dump\" >> '$BACKUP_SCRIPT_PATH'
        printf 'if ! PGPASSWORD=\"\$DB_PASS\" docker exec -i \"\$DB_HOST\" pg_dump -U \"\$DB_USER\" -d \"\$DB_NAME\" > \"\$DB_BACKUP_FILE\"; then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    echo \"%s\" \"\$DB_HOST\".\n' \"$text_db_dump_error\" >> '$BACKUP_SCRIPT_PATH'
        printf '    rm -rf \"\$TEMP_DIR\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    exit 1\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_db_dump_success\" >> '$BACKUP_SCRIPT_PATH'
        printf '\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 2. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±—ç–∫–∞–ø–∞\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'case \"\$BACKUP_TYPE\" in\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    \"db_and_remnawave\")\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        echo \"%s\"\n' \"$text_copying_remnawave_dir\" >> '$BACKUP_SCRIPT_PATH'
        printf '        cp -a /opt/remnawave \"\$TEMP_DIR/\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        ;;\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    \"all_opt\")\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        echo \"%s\"\n' \"$text_copying_all_opt\" >> '$BACKUP_SCRIPT_PATH'
        printf '        for dir in /opt/*; do\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            if [ \"\$dir\" != \"\$BACKUP_DIR\" ]; then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '                cp -a \"\$dir\" \"\$TEMP_DIR/\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '            fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        done\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        ;;\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    \"db_only\")\n' >> '$BACKUP_SCRIPT_PATH'
        printf '        echo \"%s\"\n' \"$text_db_only_backup_selected\" >> '$BACKUP_SCRIPT_PATH'
        printf '        ;;\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'esac\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_creating_single_archive\" >> '$BACKUP_SCRIPT_PATH'
        printf 'if ! tar -czf \"\$FINAL_ARCHIVE_FILE\" -C \"\$TEMP_DIR\" .; then\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    echo \"%s\"\n' \"$text_archive_error\" >> '$BACKUP_SCRIPT_PATH'
        printf '    rm -rf \"\$TEMP_DIR\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '    exit 1\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'fi\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\$FINAL_ARCHIVE_FILE\"\n' \"$text_archive_success\" >> '$BACKUP_SCRIPT_PATH'
        printf '\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –≤ Telegram\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'send_telegram_file \"\$FINAL_ARCHIVE_FILE\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'MESSAGE_TO_SEND=\"üìÖ –î–∞—Ç–∞: \$(date +\"%%Y-%%m-%%d %%H:%%M:%%S\")\\n‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'send_telegram_message \"\$MESSAGE_TO_SEND\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf '\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 5. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'clean_old_backups\n\n' >> '$BACKUP_SCRIPT_PATH'
        printf '# 6. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"%s\"\n' \"$text_deleting_temp_dir\" >> '$BACKUP_SCRIPT_PATH'
        printf 'rm -rf \"\$TEMP_DIR\"\n' >> '$BACKUP_SCRIPT_PATH'
        printf 'echo \"–ó–∞–≤–µ—Ä—à–µ–Ω–æ\"\n' >> '$BACKUP_SCRIPT_PATH'
    "
    
    sudo chmod +x "$BACKUP_SCRIPT_PATH"
    echo "$(get_text "SCRIPT_SAVED")$BACKUP_SCRIPT_PATH"

    echo "$(get_text "RUNNING_ONE_TIME_BACKUP")"
    sudo bash "$BACKUP_SCRIPT_PATH"

    if [ "$setup_cron" == "true" ]; then
        echo ""
        echo "$(get_text "CRON_SETUP_HEADER")"
        echo "$(get_text "CRON_SCHEDULE_PROMPT")"
        
        echo "1) $(get_text "CRON_DAILY")"
        echo "2) $(get_text "CRON_TWICE_DAILY")"
        echo "3) $(get_text "CRON_WEEKLY")"
        echo "4) $(get_text "CRON_CUSTOM")"
        
        read -p "$(get_text "CRON_CHOICE_PROMPT")" choice_cron

        local CRON_SCHEDULE=""
        case "$choice_cron" in
            1) CRON_SCHEDULE="0 3 * * *" ;;
            2) CRON_SCHEDULE="0 3,15 * * *" ;;
            3) CRON_SCHEDULE="0 3 * * 0" ;;
            4) read -p "$(get_text "CRON_CUSTOM")" CRON_SCHEDULE ;;
            *) echo "$(get_text "CRON_INVALID_CHOICE")"; CRON_SCHEDULE="0 3 * * *" ;;
        esac

        (crontab -l 2>/dev/null | grep -v "$BACKUP_SCRIPT_PATH"; echo "$CRON_SCHEDULE $BACKUP_SCRIPT_PATH > /dev/null 2>&1") | sudo crontab -
        echo "$(get_text "CRON_SCHEDULE_SAVED")'$CRON_SCHEDULE'."
    else
        echo "$(get_text "BACKUP_DONE_NO_CRON")"
    fi

    echo "$(get_text "PRESS_ENTER_TO_RETURN")"
    read -r
    start
}
# =========================================================

# === –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ú–ï–ù–Æ ===

select_menu() {
    local -n menu_options=$1
    local prompt="$2"
    local -n result_var=$3
    local header="$4"
    local prompt_text="$5" # <-- –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    
    local selected_index=0
    
    while true; do
        clear
        echo -e "${ORANGE}$header${NC}"
        echo ""
        
        for i in "${!menu_options[@]}"; do
            if [[ $i -eq $selected_index ]]; then
                echo -e "${GREEN}‚óè ${menu_options[$i]}${NC}"
            else
                echo -e "${ORANGE}‚óã ${menu_options[$i]}${NC}"
            fi
        done
        
        echo ""
        echo -e "${ORANGE}$prompt_text${NC}" # <-- –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        echo -e "${ORANGE}$(get_text MENU_PROMPT_SELECT)${NC}"
        
        read -sn1 -r key
        
        case "$key" in
            $'\x1b')
                read -sn1 -r -t 0.001 key
                read -sn1 -r -t 0.001 key
                case "$key" in
                    A)
                        ((selected_index = (selected_index - 1 + ${#menu_options[@]}) % ${#menu_options[@]}))
                        ;;
                    B)
                        ((selected_index = (selected_index + 1) % ${#menu_options[@]}))
                        ;;
                esac
                ;;
            "")
                result_var=$selected_index
                break
                ;;
        esac
    done
}

# =========================================================================
# === –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é ===
# =========================================================================

start() {
    declare -a main_menu_options
    main_menu_options=(
        "$(get_text MENU_NODE)"
        "$(get_text MENU_PANEL)"
        "$(get_text MENU_BACKUP)"
        "$(get_text MENU_OTHER)"
        "$(get_text MENU_WARP)"
        "$(get_text MENU_VIEW_CONFIG)"
        "$(get_text MENU_EDIT_CONFIG)"
        "$(get_text MENU_DELETE)"
        "$(get_text START_MENU_ABOUT)"
        "$(get_text MENU_EXIT)"
    )
    
    local choice_index
    select_menu \
        main_menu_options \
        "$(get_text MENU_PROMPT)" \
        choice_index \
        "$(get_text WELCOME_HEADER) ${VERSION}\n${GREEN}By Hopper${NC}"
        "$(get_text MAIN_MENU_PROMPT)"
    
    case "$choice_index" in
        0) node_menu; sleep 1 ;;
        1) remnawave_menu; sleep 1 ;;
        2) backup_menu; sleep 1 ;;
        3) other_menu; sleep 1 ;;
        4) warp_menu; sleep 1 ;;
        5) view_config; sleep 1 ;;
        6) edit_config_menu; sleep 1 ;;
        7) delete_menu; sleep 1 ;;
        8) about_script; sleep 1 ;;
        9) echo "$(get_text EXITING_SCRIPT)"; exit 0 ;;
    esac
}

setup_config() {
    local choice_index
    local -a config_menu_options=(
        "$(get_text CONFIG_MENU_SSH)"
        "$(get_text CONFIG_MENU_NODE)"
        "$(get_text CONFIG_MENU_BACK)"
    )

    while true; do
        select_menu \
            config_menu_options \
            "" \
            choice_index \
            "$(get_text CONFIG_SETUP_HEADER)" \
            "$(get_text CONFIG_SUBMENU_PROMPT)"

        case "$choice_index" in
            0) configure_ssh; sleep 1 ;;
            1) configure_node; sleep 1 ;;
            2) return ;;
        esac
    done
}
edit_config_menu() {
    local choice_index
    local -a config_menu_options=(
        "$(get_text CONFIG_MENU_SSH)"
        "$(get_text CONFIG_MENU_NODE)"
        "$(get_text CONFIG_MENU_BACK)"
    )

    while true; do
        select_menu \
            config_menu_options \
            "" \
            choice_index \
            "$(get_text CONFIG_SETUP_HEADER)" \
            "$(get_text CONFIG_SUBMENU_PROMPT)"

        case "$choice_index" in
            0) configure_ssh; sleep 1 ;;
            1) configure_node; sleep 1 ;;
            2) start; sleep 1 ;; # Go back to main menu
        esac
    done
}


configure_ssh() {
    local SSH_PORT NEW_USER USER_PASS AUTHORIZED_KEY

    clear
    echo -e "${ORANGE}$(get_text SSH_CONFIG_HEADER)${NC}"
    echo "---"
    echo -e "$(get_text SSH_CONFIG_INFO)"
    echo -e "\n---"

    echo -e "üîë ${GREEN}$(get_text SSH_PORT_HEADER)${NC}"
    echo -e "$(get_text SSH_PORT_INFO)"
    get_required_input "$(get_text SSH_PORT_PROMPT)" SSH_PORT

    echo -e "\nüë§ ${GREEN}$(get_text SSH_USER_HEADER)${NC}"
    echo -e "$(get_text SSH_USER_INFO)"
    get_required_input "$(get_text SSH_USER_PROMPT)" NEW_USER

    echo -e "\nüîë ${GREEN}$(get_text SSH_PASSWORD_HEADER)${NC}"
    echo -e "$(get_text SSH_PASSWORD_INFO)"
    get_password "$(get_text SSH_PASSWORD_PROMPT)" USER_PASS
    echo ""

    echo -e "\n‚ÑπÔ∏è ${GREEN}$(get_text SSH_KEY_HEADER)${NC}"
    echo -e "$(get_text SSH_KEY_INFO)"
    get_required_input "$(get_text SSH_KEY_PROMPT)" AUTHORIZED_KEY
    echo "---"

    echo "$(get_text SAVE_SETTINGS_START)"
    if [ ! -f "$CONFIG_FILE" ]; then touch "$CONFIG_FILE"; fi
    sed -i '/^SSH_PORT=/d' "$CONFIG_FILE"
    sed -i '/^NEW_USER=/d' "$CONFIG_FILE"
    sed -i '/^USER_PASS=/d' "$CONFIG_FILE"
    sed -i '/^AUTHORIZED_KEY=/d' "$CONFIG_FILE"

    echo "SSH_PORT=\"$SSH_PORT\"" >> "$CONFIG_FILE"
    echo "NEW_USER=\"$NEW_USER\"" >> "$CONFIG_FILE"
    echo "USER_PASS=\"$USER_PASS\"" >> "$CONFIG_FILE"
    echo "AUTHORIZED_KEY=\"$AUTHORIZED_KEY\"" >> "$CONFIG_FILE"
    echo "$(get_text SAVE_SETTINGS_SUCCESS)"
    sleep 2
}

configure_node() {
    local IP_PANEL DOMAIN SSL_CERT_KEY CADDY_DOMAIN
    
    clear
    echo -e "${ORANGE}$(get_text NODE_CONFIG_HEADER)${NC}"
    echo "---"
    echo -e "$(get_text NODE_CONFIG_INFO)"
    echo "---"

    local ip_or_domain_choice
    declare -a ip_domain_options=(
        "1) –ü–æ –¥–æ–º–µ–Ω—É"
        "2) –ü–æ IP-–∞–¥—Ä–µ—Å—É"
    )
    
    select_menu \
        ip_domain_options \
        "" \
        ip_or_domain_choice \
        "üåê ${GREEN}$(get_text NODE_CONNECT_HEADER)${NC}" \
        "$(get_text MENU_PROMPT_SELECT)"

    if [ "$ip_or_domain_choice" -eq 0 ]; then # Domain
        echo -e "\nüåê ${GREEN}$(get_text NODE_DOMAIN_HEADER)${NC}"
        get_required_input "$(get_text NODE_DOMAIN_PROMPT)" PANEL_INPUT
        IP_PANEL=$(dig +short "$PANEL_INPUT")
        if [ -z "$IP_PANEL" ]; then
            echo "$(get_text NODE_DOMAIN_ERROR)"
            sleep 2
            return
        fi
        DOMAIN="$PANEL_INPUT"
    else # IP Address
        echo -e "\n‚å®Ô∏è ${GREEN}$(get_text NODE_IP_HEADER)${NC}"
        get_required_input "$(get_text NODE_IP_PROMPT)" IP_PANEL
        DOMAIN="0"
    fi

    echo "---"
    echo -e "$(get_text CADDY_INFO)"
    get_required_input "$(get_text CADDY_PROMPT)" CADDY_DOMAIN
    echo "---"

    echo -e "üîë ${GREEN}$(get_text SSL_KEY_HEADER)${NC}"
    echo -e "$(get_text SSL_KEY_INFO)"
    get_required_input "$(get_text SSL_KEY_PROMPT)" SSL_CERT_KEY
    
    SSL_CERT_KEY=$(echo "$SSL_CERT_KEY" | sed 's/SSL_CERT=\|SSL_CERT="//; s/"$//')
    echo "---"

    echo "$(get_text SAVE_SETTINGS_START)"
    if [ ! -f "$CONFIG_FILE" ]; then touch "$CONFIG_FILE"; fi
    sed -i '/^IP_PANEL=/d' "$CONFIG_FILE"
    sed -i '/^DOMAIN=/d' "$CONFIG_FILE"
    sed -i '/^CADDY_DOMAIN=/d' "$CONFIG_FILE"
    sed -i '/^SSL_CERT_KEY=/d' "$CONFIG_FILE"

    echo "IP_PANEL=\"$IP_PANEL\"" >> "$CONFIG_FILE"
    echo "DOMAIN=\"$DOMAIN\"" >> "$CONFIG_FILE"
    echo "CADDY_DOMAIN=\"$CADDY_DOMAIN\"" >> "$CONFIG_FILE"
    echo "SSL_CERT_KEY=\"$SSL_CERT_KEY\"" >> "$CONFIG_FILE"
    echo "$(get_text SAVE_SETTINGS_SUCCESS)"
    sleep 2
}
remnawave_menu() {
    while true; do
        declare -a panel_menu_options
        panel_menu_options=(
            "$(get_text PANEL_MENU_FULL_INSTALL)"
            "$(get_text PANEL_MENU_UPLOAD_DB)"
            "$(get_text PANEL_MENU_CHANGE_DOMAIN)"
            "$(get_text PANEL_MENU_CHECK_ERRORS)"
            "$(get_text PANEL_MENU_CADDY_ONLY)"
            "$(get_text PANEL_MENU_STATUS)"
            "$(get_text GO_BACK)"
        )
        local choice_index
        select_menu \
            panel_menu_options \
            "$(get_text MENU_PROMPT)" \
            choice_index \
            "$(get_text PANEL_MENU_HEADER) ${VERSION}" \
            "$(get_text PANEL_MENU_PROMPT)"
        
        case "$choice_index" in
            0) setup_remnawave; break ;;
            1) upload_db; break ;;
            2) change_panel_domain; break ;;
            3) check_logs_and_suggest_fix; break ;;
            4) install_caddy_docker; break ;;
            5) check_panel_status; break ;;
            6) echo "$(get_text RETURNING)"; sleep 1; start; ;; # <-- –ò–∑–º–µ–Ω–µ–Ω–æ
        esac
    done
}

delete_menu() {
    while true; do
        clear
        echo -e "${ORANGE}$(get_text MENU_HEADER_DELETE)${NC}"
        echo ""
        declare -a delete_menu_options
        delete_menu_options=(
            "$(get_text MENU_CLEANUP_NODE)"
            "$(get_text MENU_BACK)"
        )
        local choice_index
        select_menu delete_menu_options "$(get_text MENU_PROMPT): " choice_index

        case "$choice_index" in
            0) cleanup_remnanode; sleep 1 ;;
            1) echo "$(get_text RETURNING)"; sleep 1; start; ;; 
        esac
    done
}

other_menu() {
    while true; do
        declare -a other_menu_options
        other_menu_options=(
            "$(get_text OTHER_MENU_REPOSITORIES)" # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç
            "$(get_text OTHER_MENU_SSH_USER)"
            "$(get_text OTHER_MENU_IPV6_TOGGLE)"
            "$(get_text OTHER_MENU_IPTABLES_SAVE)"
            "$(get_text GO_BACK)"
        )
        local choice_index
        select_menu \
            other_menu_options \
            "$(get_text MENU_PROMPT)" \
            choice_index \
            "$(get_text OTHER_SETTINGS_HEADER)" \
            "$(get_text OTHER_MENU_PROMPT)"

        case "$choice_index" in
            0) install_required_repos; sleep 1; other_menu ;;
            1) setup_ssh_and_user; break ;;
            2) toggle_ipv6; sleep 1 ;;
            3) save_iptables_rules; sleep 1 ;;
            4) echo "$(get_text RETURNING)"; sleep 1; start ;;
        esac
    done
}
backup_menu() {
    while true; do
        declare -a backup_menu_options
        backup_menu_options=(
            "$(get_text BACKUP_DB_ONLY)"
            "$(get_text BACKUP_DB_AND_REMNASOFT)"
            "$(get_text BACKUP_OPT_DIR)"
            "$(get_text DISABLE_TELEGRAM_SENDING)"
            "$(get_text GO_BACK)"
        )
        local choice_index
        select_menu \
            backup_menu_options \
            "$(get_text MENU_PROMPT)" \
            choice_index \
            "$(get_text BACKUP_MENU_HEADER)" \
            "$(get_text BACKUP_MENU_PROMPT)"

        case "$choice_index" in
            0) run_backup_logic "db"; sleep 2; break ;;
            1) run_backup_logic "db_and_remnawave"; sleep 2; break ;;
            2) run_backup_logic "all_opt"; sleep 2; break ;;
            3) disable_telegram_backup; sleep 2; break ;;
            4) echo "$(get_text RETURNING)"; sleep 1; start ;;
        esac
    done
}
warp_menu() {
    while true; do
        declare -a warp_menu_options
        warp_menu_options=(
            "$(get_text WARP_PROXY_MENU_INSTALL)"
            "$(get_text WARP_PROXY_MENU_UNINSTALL)"
            "$(get_text WARP_PROXY_MENU_STATUS)"
            "$(get_text GO_BACK)"
        )
        local choice_index
        select_menu \
            warp_menu_options \
            "$(get_text MENU_PROMPT)" \
            choice_index \
            "$(get_text WARP_PROXY_MENU_HEADER) ${VERSION}" \
            "$(get_text WARP_PROXY_PROMPT)"
        
        case "$choice_index" in
            0) install_warp_native; break ;;
            1) uninstall_warp_native; break ;;
            2) check_warp_status; break ;;
            3) echo "$(get_text RETURNING)"; sleep 1; start; ;; 
        esac
    done
}

node_menu() {
    while true; do
        declare -a node_menu_options
        node_menu_options=(
            "$(get_text NODE_MENU_FULL_INSTALL)"
            "$(get_text NODE_MENU_DOCKER_ONLY)"
            "$(get_text NODE_MENU_NODE_ONLY)"
            "$(get_text NODE_MENU_CADDY_ONLY)"
            "$(get_text NODE_MENU_FIREWALL_ONLY)"
            "$(get_text NODE_MENU_ADD_NODE_AUTO)"
            "$(get_text GO_BACK)"
        )
        local choice_index
        select_menu \
            node_menu_options \
            "$(get_text MENU_PROMPT)" \
            choice_index \
            "$(get_text NODE_MENU_HEADER) ${VERSION}" \
            "$(get_text NODE_MENU_PROMPT)"

        case "$choice_index" in
            0) run_full_install; break ;;
            1) install_docker; break ;;
            2) setup_remnanode; break ;;
            3) install_caddy_docker_remnanode; break ;;
            4) setup_firewall; break ;;
            5) add_remnawave_node_auto; break ;;
            6) echo "$(get_text RETURNING)"; sleep 1; start; ;; # <-- –ò–ó–ú–ï–ù–ï–ù–û: –≤—ã–∑–æ–≤ `start`
        esac
    done
}

# =========================================================================
# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ===
# =========================================================================

main() {
    local choice_lang

    while true; do
        clear
        echo -e "${GREEN}Choose a language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: ${NC}"
        echo -e "${ORANGE}1) (EN) English${NC}"
        echo -e "${ORANGE}2) (RU) –†—É—Å—Å–∫–∏–π${NC}"
        echo -e "${ORANGE}0) üö™ Exit / –í—ã—Ö–æ–¥${NC}"
        echo ""
        read -p "Enter your choice / –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: " choice_lang
        case "$choice_lang" in
            1) echo "EN is not supported in this example. Switching to RU."; LANG_CHOICE="ru"; break ;;
            2) LANG_CHOICE="ru"; break ;;
            0) echo "$(get_text EXITING_SCRIPT)"; exit 0 ;;
            *) echo "$(get_text INVALID_INPUT)"; sleep 2 ;;
        esac
    done

    # Check for .env file and load it
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    else
        echo -e "${ORANGE}$(get_text CONFIG_REQUIRED_INFO)${NC}"
        
        # –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        yn_prompt "$(get_text CONFIG_SETUP_PROMPT)"

        if [ "$?" -eq 0 ]; then
            edit_config_menu
        fi
    fi

    start
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
